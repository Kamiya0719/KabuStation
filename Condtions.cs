using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharp_sample
{
	class Condtions
	{
		private const bool IsAllCheck = true;


		public static void Aaa()
		{
			List<string[]> conditions = CsvControll.GetConditions();
			string ands = "";
			string ors = "";
			foreach (string[] cond in conditions) {
				bool isAnd = cond[0] == "1"; // and条件かor条件か

				int period = Int32.Parse(cond[2]);
				int cnt = Int32.Parse(cond[4]);
				double ratio = Math.Round(Double.Parse(cond[6]), 2, MidpointRounding.AwayFromZero);
				int diffDay = Int32.Parse(cond[3]);

				bool isTrue = (cond[5] == "1");

				int idx = -1;
				for (int diffDayIdx = 0; diffDayIdx < diffDayList.Length; diffDayIdx++) {
					for (int ratioIdx = 0; ratioIdx < ratioList.Length; ratioIdx++) {
						for (int pIdx = 0; pIdx < periodCntList.GetLength(0); pIdx++) {
							if (diffDayList[diffDayIdx] == diffDay && ratioList[ratioIdx] == ratio && periodCntList[pIdx, 0] == period && periodCntList[pIdx, 1] == cnt) {
								idx = GetCondIdx(pIdx, ratioIdx, diffDayIdx, isTrue);
							}
						}
					}
				}
				if (idx == -1) {
					Common.DebugInfo("error", period, cnt, ratio, diffDay);
				}

				if (isAnd) {
					ands += idx + ",";
				} else {
					ors += idx + ",";
				}
			}
			Common.DebugInfo("res", ands, ors);
		}

		/** 2500コード*2000日*数千パターンの51チェックを全て行って保存する */
		public static void SaveCond51All()
		{
			foreach (string symbol in CsvControll.GetCodeList()) {
				List<string[]> codeInfo = CsvControll.GetCodeInfo(symbol);
				for (int diffDayIdx = 0; diffDayIdx < diffDayList.Length; diffDayIdx++) {
					for (int ratioIdx = 0; ratioIdx < ratioList.Length; ratioIdx++) {
						SaveCond51(symbol, codeInfo, diffDayIdx, ratioIdx);
					}
				}
				Common.DebugInfo("SaveCond51All", symbol);
			}
		}

		private static void SaveCond51(string symbol, List<string[]> codeInfo, int diffDayIdx, int ratioIdx)
		{
			int diffDay = diffDayList[diffDayIdx];
			double ratio = ratioList[ratioIdx];

			Dictionary<string, bool> list = new Dictionary<string, bool>();
			for (int i = codeInfo.Count - 1; i >= diffDay; i--) {
				list[codeInfo[i][0]] = Double.Parse(codeInfo[i - diffDay][4]) * ratio <= Double.Parse(codeInfo[i][4]);
			}

			List<string[]> saveData = new List<string[]>();
			for (int i = codeInfo.Count - 1; i >= 120; i--) {
				string[] saveRow = new string[periodCntList.GetLength(0) + 1];
				saveRow[0] = codeInfo[i][0]; // 日付
				for (int p = 0; p < periodCntList.GetLength(0); p++) {
					int cnt = periodCntList[p, 1];
					for (int j = 1; j <= periodCntList[p, 0]; j++) {
						if (list[codeInfo[i - j][0]]) cnt--;
						if (0 >= cnt) break;
					}
					saveRow[p + 1] = 0 >= cnt ? "1" : "0";
				}
				saveData.Add(saveRow);
			}

			// 保存
			CsvControll.SaveCond51All(saveData, symbol, diffDayIdx, ratioIdx);
		}



		/** 利益情報を全て保存する */
		public static void SaveBenefitAll()
		{
			foreach (string symbol in CsvControll.GetCodeList()) {
				SaveBenefit(symbol);
			}
		}

		private static void SaveBenefit(string symbol)
		{
			// 買って
			List<string[]> saveData = new List<string[]>();
			List<string[]> codeInfo = CsvControll.GetCodeInfo(symbol);
			for (int i = 0; i < codeInfo.Count - 42; i++) {
				// 
				DateTime date = DateTime.Parse(codeInfo[i][0]);
				double buyPrice = Double.Parse(codeInfo[i][4]); // 終値で購入

				double sellPrice = Double.Parse(codeInfo[i + 42][4]);
				int sellPeriod = 0;
				for (int havePeriod = 1; havePeriod <= 42; havePeriod++) {
					sellPeriod = havePeriod;

					double sellRatio = 1.01;
					foreach (KeyValuePair<int, double> pair in Def.idealSellRatio) {
						if (havePeriod <= pair.Key) sellRatio = pair.Value;
					}
					// 理想売り
					if (Double.Parse(codeInfo[i + havePeriod][2]) >= buyPrice * sellRatio) {
						sellPrice = buyPrice * sellRatio;
						break;
					}
					// 損切 損失/前日比
					if (Double.Parse(codeInfo[i + havePeriod][3]) * 100 < buyPrice * (100 - Def.LossCutRatio[0, 0])
						|| Double.Parse(codeInfo[i + havePeriod][3]) * 100 < Double.Parse(codeInfo[i + havePeriod - 1][4]) * (100 - Def.LossCutRatio[0, 1])) {
						sellPrice = Double.Parse(codeInfo[i + havePeriod][4]);
						break;
					}
				}

				int benefit = (int)Math.Round((sellPrice / buyPrice - 1) * 100, MidpointRounding.AwayFromZero);
				//Common.DebugInfo("SaveBenefit", benefit, sellPeriod);
				saveData.Add(new string[3] { codeInfo[i][0], benefit.ToString(), sellPeriod.ToString() });
			}

			CsvControll.SaveBenefitAll(saveData, symbol);
		}


		private const bool IsAndCheck = true; // andチェックかorチェックか
		private const bool IsPro500Only = false;
		private const int AllTrueCondIdx = 1;
		private static readonly int[] OldPro500 = new int[] {
		1332,1333,1414,1417,1605,1662,1719,1720,1721,1812,1820,1832,1861,1911,1925,1928,1930,1934,1941,1959,1961,1964,1965,1969,1973,1975,2121,2124,2146,2154,2212,2216,2229,2327,2337,2501,2502,2503,2579,2585,2670,2674,2678,2685,2702,2749,2751,2760,2768,2782,2791,2801,2802,2805,2809,2811,2871,2875,2914,2915,2928,3002,3003,3038,3048,3050,3064,3075,3076,3086,3092,3093,3097,3099,3104,3107,3110,3132,3179,3196,3231,3289,3302,3355,3374,3382,3388,3401,3405,3407,3433,3434,3436,3445,3480,3498,3539,3569,3591,3608,3612,3679,3692,3733,3774,3791,3864,3901,3941,3964,3993,3994,4004,4022,4028,4042,4043,4045,4047,4063,4088,4091,4095,4107,4114,4116,4118,4182,4183,4186,4188,4189,4194,4203,4204,4206,4208,4212,4216,4218,4228,4275,4307,4369,4373,4374,4401,4413,4417,4419,4452,4486,4493,4502,4507,4519,4526,4543,4568,4578,4611,4617,4619,4661,4676,4681,4684,4687,4704,4725,4733,4743,4746,4751,4755,4765,4768,4886,4901,4956,4972,4980,4992,5013,5019,5020,5027,5101,5105,5108,5110,5161,5191,5201,5254,5310,5333,5334,5344,5384,5393,5401,5411,5595,5703,5706,5711,5713,5714,5715,5741,5801,5802,5803,5834,5838,5842,5857,5911,5943,5975,5991,6055,6062,6088,6098,6113,6135,6140,6141,6146,6178,6196,6201,6228,6254,6255,6258,6266,6269,6272,6273,6278,6282,6294,6301,6305,6315,6323,6326,6330,6339,6357,6361,6363,6367,6368,6369,6370,6371,6376,6383,6395,6432,6454,6458,6463,6465,6471,6472,6479,6480,6481,6486,6490,6501,6503,6504,6506,6508,6516,6524,6526,6544,6547,6563,6594,6670,6701,6702,6723,6724,6728,6741,6752,6758,6762,6777,6787,6841,6857,6861,6871,6877,6902,6920,6946,6954,6971,6981,7003,7004,7011,7012,7013,7059,7085,7105,7148,7157,7163,7167,7172,7180,7181,7182,7186,7187,7199,7201,7203,7226,7240,7259,7267,7269,7270,7272,7276,7287,7313,7318,7320,7352,7414,7420,7451,7453,7460,7516,7532,7545,7581,7599,7611,7634,7649,7701,7729,7731,7732,7733,7735,7739,7740,7741,7751,7752,7762,7867,7911,7912,7936,7942,7966,7972,7974,7976,7979,7984,7994,7995,8001,8002,8012,8014,8015,8016,8020,8022,8031,8035,8043,8050,8053,8058,8060,8074,8088,8097,8104,8113,8136,8174,8194,8218,8233,8242,8252,8253,8267,8279,8291,8306,8308,8309,8316,8354,8377,8411,8424,8425,8473,8566,8591,8593,8595,8596,8601,8604,8630,8697,8698,8725,8750,8766,8793,8795,8801,8802,8804,8830,8848,8923,8929,8934,9009,9020,9022,9024,9025,9066,9068,9069,9101,9104,9142,9201,9237,9267,9268,9275,9278,9279,9301,9303,9338,9384,9404,9409,9412,9418,9432,9433,9434,9435,9436,9503,9506,9551,9552,9600,9613,9616,9697,9719,9731,9735,9746,9765,9766,9769,9823,9837,9843,9882,9889,9956,9983,9984,
		};
		// skip   T0:23732,  T1:0.195, T2:10.2  #End#
		// noskip T0:116276, T1:0.256, T2:12.9  #End#
		private static readonly int[] OldAnd51List = new int[] {
			6335,6767,6559,7439,7215,6991,7855,6783,2580,1684,2806,1254,806,1686,134,2356,5696,1460,358,136,584,1236,1462,1480,3926,2132,360,790,788,808,1238,566,4765,3629,568,120,792,398,5641,8105,
			3197,342,7936,5645,3631,479,8323,5423,4287,6077,3671,7887,6079,8303,5685,7679,8135,8329,6093,8125,6105,8111,8127,8319,7903,4573,7037,5673,6103,5907,2747,6109,5909,3005,7919,6119,8378,
		};
		private static readonly int[] OldOr51List = new int[] {
			708,2322,1604,24,278,38,1202,4582,5026,3456,4907,6600,4558,6588,7266,3656,4308,4320,6112,6824,8352,1870,7046,6824,4094,6590,3014,6826,72,6826,4893,7706,78,3676,
		};

		private static readonly int[] NotCond = new int[]{
			0,2,4,16,32,161,177,193,195,209,211,213,215,224,226,228,230,240,242,256,258,272,288,401,417,419,433,435,437,448,450,452,464,
			466,480,496,512,593,609,625,641,643,657,659,661,663,672,674,688,801,817,833,835,849,851,865,867,869,881,883,885,887,896,898,
			900,902,912,914,916,928,930,932,944,946,960,962,976,1073,1089,1105,1107,1120,1122,1124,1126,1136,1138,1152,1154,1168,1170,1184,
			1265,1281,1297,1299,1313,1315,1329,1331,1333,1335,1344,1346,1348,1360,1362,1376,1392,1408,1473,1489,1505,1507,1521,1523,1537,
			1539,1541,1553,1555,1557,1559,1568,1570,1584,1681,1697,1699,1713,1715,1729,1731,1733,1745,1747,1749,1761,1763,1765,1767,1777,
			1779,1781,1783,1792,1794,1796,1798,1808,1810,1812,1814,1824,1826,1828,1840,1842,1844,1856,1858,1872,1874,1969,1985,2001,2003,
			2016,2018,2020,2022,2032,2034,2036,2048,2050,2052,2064,2066,2080,2082,2096,2161,2177,2193,2209,2211,2225,2227,2229,2240,2242,
			2244,2246,2256,2258,2260,2272,2274,2288,2290,2304,2320,2369,2385,2401,2403,2417,2419,2433,2435,2437,2449,2451,2453,2455,2464,
			2466,2468,2480,2482,2496,2498,2512,2528,2577,2593,2609,2611,2625,2627,2629,2641,2643,2645,2657,2659,2661,2663,2673,2675,2677,
			2679,2688,2704,2801,2803,2817,2819,2833,2835,2837,2849,2851,2853,2865,2867,2869,2871,2881,2883,2885,2887,2897,2899,2901,2903,
			2905,2912,2914,2916,2918,2920,2928,2930,2932,2934,2936,2944,2946,2948,2950,2960,2962,2964,2966,2976,2978,2980,2992,2994,3008,
			3089,3105,3121,3136,3138,3140,3142,3144,3152,3154,3156,3158,3168,3170,3172,3174,3184,3186,3188,3190,3200,3202,3204,3216,3218,
			3232,3297,3313,3329,3331,3345,3347,3360,3362,3364,3366,3368,3376,3378,3380,3382,3392,3394,3396,3398,3408,3410,3412,3424,3426,
			3440,3442,3505,3521,3537,3539,3553,3555,3569,3571,3573,3584,3586,3588,3590,3600,3602,3604,3606,3616,3618,3620,3632,3634,3636,
			3648,3650,3664,3713,3729,3745,3747,3761,3763,3765,3777,3779,3781,3793,3795,3797,3799,3808,3810,3812,3814,3824,3826,3828,3840,
			3842,3844,3856,3858,3872,3874,3888,3921,3937,3953,3955,3969,3971,3973,3985,3987,3989,4001,4003,4005,4007,4017,4019,4021,4023,
			4032,4034,4036,4048,4050,4064,4066,4080,4096,4145,4147,4161,4163,4177,4179,4181,4193,4195,4197,4199,4209,4211,4213,4215,4225,
			4227,4229,4231,4241,4243,4245,4247,4249,4256,4369,4371,4373,4385,4387,4389,4391,4401,4403,4405,4407,4417,4419,4421,4423,4433,
			4435,4437,4439,4441,4449,4451,4453,4455,4457,4465,4467,4469,4471,4473,4475,4480,4482,4484,4486,4488,4490,4496,4498,4500,4502,
			4504,4512,4514,4516,4518,4520,4528,4530,4532,4534,4544,4546,4548,4550,4560,4562,4564,4566,4576,4578,4673,4689,4704,4706,4708,
			4710,4712,4714,4720,4722,4724,4726,4728,4736,4738,4740,4742,4744,4752,4754,4756,4758,4768,4770,4772,4774,4784,4786,4788,4800,
			4865,4881,4897,4899,4913,4915,4928,4930,4932,4934,4936,4944,4946,4948,4950,4952,4960,4962,4964,4966,4976,4978,4980,4982,4992,
			4994,4996,5008,5010,5024,5073,5089,5091,5105,5107,5121,5123,5125,5137,5139,5141,5152,5154,5156,5158,5160,5168,5170,5172,5174,
			5184,5186,5188,5190,5200,5202,5204,5216,5218,5220,5232,5234,5281,5297,5299,5313,5315,5329,5331,5333,5345,5347,5349,5351,5361,
			5363,5365,5367,5376,5378,5380,5382,5392,5394,5396,5398,5408,5410,5412,5424,5426,5428,5440,5442,5456,5489,5505,5507,5521,5523,
			5525,5537,5539,5541,5553,5555,5557,5559,5569,5571,5573,5575,5585,5587,5589,5591,5600,5602,5604,5606,5616,5618,5620,5632,5634,
			5636,5648,5650,5664,5680,5713,5715,5729,5731,5733,5745,5747,5749,5761,5763,5765,5767,5777,5779,5781,5783,5793,5795,5797,5799,
			5801,5809,5811,5813,5815,5817,5824,5826,5828,5840,5842,5856,5858,5872,5888,5937,5939,5941,5953,5955,5957,5969,5971,5973,5975,
			5985,5987,5989,5991,6001,6003,6005,6007,6009,6017,6019,6021,6023,6025,6033,6035,6037,6039,6041,6043,6048,6161,6163,6165,6167,
			6177,6179,6181,6183,6193,6195,6197,6199,6209,6211,6213,6215,6217,6225,6227,6229,6231,6233,6241,6243,6245,6247,6249,6251,6257,
			6259,6261,6263,6265,6267,6272,6274,6276,6278,6280,6282,6284,6288,6290,6292,6294,6296,6298,6304,6306,6308,6310,6312,6314,6320,
			6322,6324,6326,6328,6336,6338,6340,6342,6344,6352,6354,6356,6358,6368,6370,6372,6465,6481,6496,6498,6500,6502,6504,6506,6508,
			6512,6514,6516,6518,6520,6522,6528,6530,6532,6534,6536,6538,6544,6546,6548,6550,6552,6560,6562,6564,6566,6576,6578,6580,6582,
			6592,6594,6596,6657,6673,6689,6705,6707,6720,6722,6724,6726,6728,6730,6736,6738,6740,6742,6744,6746,6752,6754,6756,6758,6760,
			6768,6770,6772,6774,6776,6784,6786,6788,6790,6800,6802,6804,6806,6816,6818,6865,6881,6897,6899,6913,6915,6929,6931,6933,6944,
			6946,6948,6950,6952,6954,6960,6962,6964,6966,6968,6970,6976,6978,6980,6982,6984,6992,6994,6996,6998,7008,7010,7012,7014,7024,
			7026,7028,7040,7073,7089,7105,7107,7121,7123,7125,7137,7139,7141,7153,7155,7157,7159,7168,7170,7172,7174,7176,7178,7184,7186,
			7188,7190,7192,7200,7202,7204,7206,7208,7216,7218,7220,7222,7232,7234,7236,7238,7248,7250,7252,7264,7297,7313,7315,7329,7331,
			7333,7345,7347,7349,7361,7363,7365,7367,7377,7379,7381,7383,7392,7394,7396,7398,7400,7402,7408,7410,7412,7414,7416,7424,7426,
			7428,7430,7440,7442,7444,7446,7456,7458,7460,7472,7474,7505,7521,7523,7537,7539,7541,7553,7555,7557,7569,7571,7573,7575,7585,
			7587,7589,7591,7601,7603,7605,7607,7609,7616,7618,7620,7622,7624,7632,7634,7636,7638,7648,7650,7652,7654,7664,7666,7668,7680,
			7682,7684,7696,7729,7745,7747,7761,7763,7765,7777,7779,7781,7783,7793,7795,7797,7799,7809,7811,7813,7815,7817,7825,7827,7829,
			7831,7833,7840,7842,7844,7846,7848,7856,7858,7860,7862,7872,7874,7876,7878,7888,7890,7892,7904,7906,7920,7953,7955,7969,7971,
			7973,7985,7987,7989,7991,8001,8003,8005,8007,8017,8019,8021,8023,8033,8035,8037,8039,8041,8049,8051,8053,8055,8057,8059,8064,
			8066,8068,8070,8080,8082,8084,8096,8098,8112,8114,8128,8177,8179,8181,8193,8195,8197,8199,8209,8211,8213,8215,8225,8227,8229,
			8231,8233,8241,8243,8245,8247,8249,8257,8259,8261,8263,8265,8267,8273,8275,8277,8279,8281,8283,8288,8401,8403,8405,8407,8417,
			8419,8421,8423,8425,8433,8435,8437,8439,8441,8449,8451,8453,8455,8457,8459,8465,8467,8469,8471,8473,8475,8481,8483,8485,8487,
			8489,8491,8493,8497,8499,8501,8503,8505,8507,8509,
			// 追加分
			/*
			8443,645,6235,8025,8251,6269,8461,7351,7731,8285,1317,853,197,5593,8043,7593,
			8511,6201,7835,1109,1491,2595,7559,1249,7143,5819,2195,4251,1543,2213,385,7281,6027,7385,439,627,2387,5993,3123,871,8495,8217,
			6917,4459,5317,421,7801,7749,8061,5543,7611,8009,5143,8235,8269,5821,6045,7819,8287,8183,7767,1457,6047,6935,
			1888,7387,2821,4425,1525,6255,4253,2855,2907,7837,4479,5595,6449,6883,3731,7091,5751,6691,5206,4165,1091,3523,
			4025,3939,1785,3489,3575,3349,5369,2005,4027,5803,4233,889,199,6709,
			895,1791,2911,6253,2909,4255,5597,2231,2681,4917,1787,3557,5057,4461,7317,1561,5785,647,1111,665,7299,7975,4691,2889,5823,3991,217,2683,3281,2457,
			629,1751,5265,1319,3315,7109,2353,6029,2439,891,1337,3351,837,1789,2421,785,3801,3783,1717,179,3957,2687,7161,4183,7335,1987,5012,1301,5577,1563,
			2785,4353,6145,8385,8387,8389,6147,181,1093,4029,2613,5109,3830,3622,4883,671,4536,5371,5414,2007,7785,403,4919,2690,1567,1769,441,4849,855,2145,
			4355,7670,423,819,304,1800,3749,2685,611,5335,2459,6483,7577,2922,7543,6011,7698,1057,7957,6330,667,2179,6568,3428,8045,3125,4082,676,3592,4938,
			1775,2895,447,1343,8219,2891,219,1339,6237,2233,3803,5373,4235,3577,893,2463,2647,873,4443,5805,2665,5145,7595,5283,1565,2215,3333,3805,2461,7163,
			879,2823,2839,4375,1527,1113,1545,649,1735,443,201,3559,3697,1771,1989,1095,2873,5075,631,5127,2235,3507,4009,2423,2197,7525,7369,2893,1303,669,
			6149,6185,5977,8391,8201,1341,221,5491,3579,5509,8253,6031,577,4272,1509,1321,3127,8100,5527,2996,6849,6711,4237,4693,5301,2982,2405,6901,6732,2441,
			7993,2237,3581,4217,5147,3353,4031,6675,244,3541,405,5579,2371,7000,4506,3107,6762,4802,1378,445,7127,5666,18,2009,3860,1075,704,4409,1773,1115,
			1759,2879,4447,6239,655,4445,1551,1119,8011,1753,
			4431,6223,8463,2671,6013,2239,5581,6221,4239,1327,5149,431,3975,7803,6937,2667,5769,875,5353,7751,8411,8271,5995,5735,2631,7821,4901,2669,3785,4011,
			948,964,1741,1757,1860,1876,2637,2653,2861,2877,3757,3773,3789,3981,3997,4013,4205,4221,4429,5117,5133,5341,5357,5549,5565,5773,5789,5997,8013,8029,
			*/

		};
		private static readonly int[] ConfirmAnds = new int[6] {
			6130, // Cond:6130, Score:4880.38, sT:52635, sP:3.1429, sB:0.7679, nT:163309, nP:3.7239, nB:0.7812
			2796, // Cond:2796, Score:4880.38, sT:52635, sP:3.1429, sB:0.7679, nT:163309, nP:3.7239, nB:0.7812
			737, // Cond:737, Score:4880.38, sT:52635, sP:3.1429, sB:0.7679, nT:163309, nP:3.7239, nB:0.7812
			8046, // Cond:8046, Score:4974.193, sT:56628, sP:3.1063, sB:0.7335, nT:175983, nP:3.6702, nB:0.728
			8354, // Cond:8354, Score:4880.38, sT:52635, sP:3.1429, sB:0.7679, nT:163309, nP:3.7239, nB:0.7812
			8344, // Cond:8344, Score:4880.38, sT:52635, sP:3.1429, sB:0.7679, nT:163309, nP:3.7239, nB:0.7812

/*
Cond:8046, Score:4974.193, sT:56628, sP:3.1063, sB:0.7335, nT:175983, nP:3.6702, nB:0.728

LowScoreRank2 , T0:-1 , T1:1 , T2:
Cond:2786, Score:4927.574, sT:52198, sP:3.1454, sB:0.7826, nT:160836, nP:3.7232, nB:0.7943
 */
		};
		private static readonly int[] ConfirmOrs = new int[12] {
			472,  // Cond:3444, Score:4839.551, sT:51450, sP:3.1411, sB:0.7736, nT:157219, nP:3.7187, nB:0.8079
			66,   // Cond:5904, Score:4707.361, sT:50150, sP:3.0857, sB:0.7569, nT:161393, nP:3.7145, nB:0.7789
			1977, // Cond:1977, Score:4864.97, sT:51332, sP:3.1188, sB:0.7739, nT:158137, nP:3.6953, nB:0.8106
			2203, // Cond:1083, Score:4876.456, sT:51314, sP:3.1596, sB:0.7885, nT:157830, nP:3.7373, nB:0.7994
			1618, // Cond:1602, Score:4847.739, sT:51510, sP:3.0996, sB:0.7727, nT:157259, nP:3.664, nB:0.7833
			7436, // Cond:8298, Score:4771.598, sT:51574, sP:3.0373, sB:0.745, nT:158351, nP:3.5353, nB:0.7652
			5388, // Cond:7642, Score:4878.302, sT:52784, sP:3.1533, sB:0.7683, nT:163227, nP:3.7368, nB:0.7798
			2639, // Cond:1083, Score:4863.172, sT:52714, sP:3.1514, sB:0.7662, nT:163416, nP:3.7414, nB:0.7782
			52,   // Cond:1424, Score:4813.474, sT:52168, sP:3.1161, sB:0.7588, nT:161722, nP:3.7236, nB:0.7772
			6717, // Cond:6717, Score:4880.38, sT:52635, sP:3.1429, sB:0.7679, nT:163309, nP:3.7239, nB:0.7812
			6433, // Cond:6433, Score:5031.917, sT:54780, sP:3.0866, sB:0.7562, nT:169701, nP:3.6544, nB:0.7707
			5059,
//5068
// Cond:5059, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939

/*
 LowScoreRank2 , T0:-1 , T1:1 , T2:
Cond:5059, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:6695, Score:5088.489, sT:52473, sP:3.0991, sB:0.7997, nT:161152, nP:3.6672, nB:0.801
Cond:7922, Score:5088.186, sT:52532, sP:3.0962, sB:0.7983, nT:161378, nP:3.6626, nB:0.7997 , T3:5059,6695,7922,  #End#
LowScoreRank2 , T0:472 , T1:1 , T2:
Cond:3444, Score:5098.695, sT:50612, sP:3.0915, sB:0.825, nT:153377, nP:3.6542, nB:0.835
Cond:1604, Score:5036.643, sT:50114, sP:3.1204, sB:0.8275, nT:153589, nP:3.7142, nB:0.8303
Cond:1144, Score:5036.013, sT:52042, sP:3.0903, sB:0.7929, nT:159513, nP:3.6679, nB:0.8089 , T3:3444,1604,1144,  #End#
LowScoreRank2 , T0:66 , T1:1 , T2:
Cond:6851, Score:4862.573, sT:50916, sP:3.0509, sB:0.7704, nT:164370, nP:3.6727, nB:0.7723
Cond:4972, Score:4862.136, sT:50271, sP:3.1054, sB:0.786, nT:164773, nP:3.7782, nB:0.7907
Cond:7896, Score:4855.415, sT:51446, sP:3.0573, sB:0.7618, nT:169193, nP:3.7114, nB:0.7634 , T3:6851,4972,7896,  #End#
LowScoreRank2 , T0:1977 , T1:1 , T2:
Cond:1081, Score:5051.082, sT:52006, sP:3.0987, sB:0.802, nT:159204, nP:3.6614, nB:0.795
Cond:5059, Score:5021.69, sT:51821, sP:3.0984, sB:0.7977, nT:159073, nP:3.667, nB:0.7986
Cond:1289, Score:5014.516, sT:52108, sP:3.1045, sB:0.7944, nT:159478, nP:3.6704, nB:0.7943 , T3:1081,5059,1289,  #End#
LowScoreRank2 , T0:2203 , T1:1 , T2:
Cond:1739, Score:5067.118, sT:52288, sP:3.098, sB:0.7992, nT:160217, nP:3.6661, nB:0.7992
Cond:843, Score:5064.199, sT:52786, sP:3.103, sB:0.7933, nT:161497, nP:3.6677, nB:0.7931
Cond:5077, Score:5062.726, sT:52616, sP:3.0948, sB:0.7943, nT:161808, nP:3.6632, nB:0.7895 , T3:1739,843,5077,  #End#
LowScoreRank2 , T0:1618 , T1:1 , T2:
Cond:1602, Score:5046.68, sT:50746, sP:3.0479, sB:0.8103, nT:153297, nP:3.5933, nB:0.8073
Cond:353, Score:5044.553, sT:52640, sP:3.0034, sB:0.7856, nT:156727, nP:3.5359, nB:0.7557
Cond:1937, Score:5007.028, sT:50894, sP:3.0007, sB:0.8011, nT:153451, nP:3.5651, nB:0.7708 , T3:1602,353,1937,  #End#
LowScoreRank2 , T0:7436 , T1:1 , T2:
Cond:8298, Score:4954.52, sT:51722, sP:2.9877, sB:0.7659, nT:158524, nP:3.4697, nB:0.7759
Cond:7868, Score:4919.117, sT:52393, sP:3.0622, sB:0.7662, nT:161365, nP:3.6068, nB:0.7716
Cond:7660, Score:4861.257, sT:57026, sP:3.1657, sB:0.7164, nT:183632, nP:3.8333, nB:0.7227 , T3:8298,7868,7660,  #End#

///////////////////////////////////////////////////////////////////

LowScoreRank2 , T0:6 , T1:0 , T2:
Cond:3444, Score:5098.695, sT:50612, sP:3.0915, sB:0.825, nT:153377, nP:3.6542, nB:0.835
Cond:472, Score:5068.098, sT:52363, sP:3.0991, sB:0.7977, nT:160768, nP:3.6675, nB:0.8002
Cond:1604, Score:5036.643, sT:50114, sP:3.1204, sB:0.8275, nT:153589, nP:3.7142, nB:0.8303 , T3:3444,472,1604,  #End#
LowScoreRank2 , T0:6 , T1:1 , T2:
Cond:66, Score:5068.098, sT:52363, sP:3.0991, sB:0.7977, nT:160768, nP:3.6675, nB:0.8002
Cond:6851, Score:4862.573, sT:50916, sP:3.0509, sB:0.7704, nT:164370, nP:3.6727, nB:0.7723
Cond:4972, Score:4862.136, sT:50271, sP:3.1054, sB:0.786, nT:164773, nP:3.7782, nB:0.7907 , T3:66,6851,4972,  #End#
LowScoreRank2 , T0:6 , T1:2 , T2:
Cond:1977, Score:5068.098, sT:52363, sP:3.0991, sB:0.7977, nT:160768, nP:3.6675, nB:0.8002
Cond:1081, Score:5051.082, sT:52006, sP:3.0987, sB:0.802, nT:159204, nP:3.6614, nB:0.795
Cond:5059, Score:5021.69, sT:51821, sP:3.0984, sB:0.7977, nT:159073, nP:3.667, nB:0.7986 , T3:1977,1081,5059,  #End#
LowScoreRank2 , T0:6 , T1:3 , T2:
Cond:2203, Score:5068.098, sT:52363, sP:3.0991, sB:0.7977, nT:160768, nP:3.6675, nB:0.8002
Cond:1739, Score:5067.118, sT:52288, sP:3.098, sB:0.7992, nT:160217, nP:3.6661, nB:0.7992
Cond:843, Score:5064.199, sT:52786, sP:3.103, sB:0.7933, nT:161497, nP:3.6677, nB:0.7931 , T3:2203,1739,843,  #End#
LowScoreRank2 , T0:6 , T1:4 , T2:
Cond:1618, Score:5068.098, sT:52363, sP:3.0991, sB:0.7977, nT:160768, nP:3.6675, nB:0.8002
Cond:1602, Score:5046.68, sT:50746, sP:3.0479, sB:0.8103, nT:153297, nP:3.5933, nB:0.8073
Cond:353, Score:5044.553, sT:52640, sP:3.0034, sB:0.7856, nT:156727, nP:3.5359, nB:0.7557 , T3:1618,1602,353,  #End#
LowScoreRank2 , T0:6 , T1:5 , T2:
Cond:7436, Score:5068.098, sT:52363, sP:3.0991, sB:0.7977, nT:160768, nP:3.6675, nB:0.8002
Cond:8298, Score:4954.52, sT:51722, sP:2.9877, sB:0.7659, nT:158524, nP:3.4697, nB:0.7759
Cond:7868, Score:4919.117, sT:52393, sP:3.0622, sB:0.7662, nT:161365, nP:3.6068, nB:0.7716 , T3:7436,8298,7868,  #End#
LowScoreRank2 , T0:6 , T1:6 , T2:
Cond:4954, Score:5070.665, sT:52246, sP:3.1062, sB:0.8015, nT:160255, nP:3.6751, nB:0.8015
Cond:7642, Score:5069.245, sT:52190, sP:3.1058, sB:0.8023, nT:160065, nP:3.6741, nB:0.8007
Cond:7880, Score:5068.679, sT:52464, sP:3.0985, sB:0.7967, nT:161279, nP:3.6664, nB:0.7969 , T3:4954,7642,7880,  #End#
LowScoreRank2 , T0:6 , T1:7 , T2:
Cond:2639, Score:5068.098, sT:52363, sP:3.0991, sB:0.7977, nT:160768, nP:3.6675, nB:0.8002
Cond:5285, Score:5066.773, sT:51878, sP:3.0966, sB:0.8027, nT:159237, nP:3.6672, nB:0.8089
Cond:5059, Score:5066.018, sT:52153, sP:3.0957, sB:0.7982, nT:160374, nP:3.6653, nB:0.8058 , T3:2639,5285,5059,  #End#
LowScoreRank2 , T0:6 , T1:8 , T2:
Cond:52, Score:5068.098, sT:52363, sP:3.0991, sB:0.7977, nT:160768, nP:3.6675, nB:0.8002
Cond:5059, Score:5024.48, sT:52154, sP:3.0651, sB:0.7873, nT:160860, nP:3.6579, nB:0.7935
Cond:7922, Score:5017.862, sT:51624, sP:3.0648, sB:0.7934, nT:158833, nP:3.6565, nB:0.7997 , T3:52,5059,7922,  #End#
LowScoreRank2 , T0:6 , T1:9 , T2:
Cond:6717, Score:5068.098, sT:52363, sP:3.0991, sB:0.7977, nT:160768, nP:3.6675, nB:0.8002
Cond:6695, Score:5037.478, sT:51458, sP:3.1053, sB:0.8045, nT:157469, nP:3.6754, nB:0.815
Cond:7922, Score:5036.78, sT:51513, sP:3.1019, sB:0.8028, nT:157654, nP:3.6708, nB:0.8144 , T3:6717,6695,7922,  #End#
LowScoreRank2 , T0:6 , T1:10 , T2:
Cond:5059, Score:5069.966, sT:52603, sP:3.0933, sB:0.7929, nT:161409, nP:3.6489, nB:0.7987
Cond:6433, Score:5068.098, sT:52363, sP:3.0991, sB:0.7977, nT:160768, nP:3.6675, nB:0.8002
Cond:5285, Score:5065.1, sT:52336, sP:3.0934, sB:0.796, nT:160269, nP:3.65, nB:0.8015 , T3:5059,6433,5285,  #End#
LowScoreRank2 , T0:6 , T1:11 , T2:
Cond:5059, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:6695, Score:5088.489, sT:52473, sP:3.0991, sB:0.7997, nT:161152, nP:3.6672, nB:0.801
Cond:7922, Score:5088.186, sT:52532, sP:3.0962, sB:0.7983, nT:161378, nP:3.6626, nB:0.7997 , T3:5059,6695,7922,  #End#
End , T0:03:18:35.1823939  #End#

LowScoreRank2 , T0:0 , T1:11 , T2:
Cond:5059, Score:5056.176, sT:54085, sP:3.1304, sB:0.7807, nT:169445, nP:3.7717, nB:0.7727
Cond:7922, Score:5047.565, sT:53550, sP:3.131, sB:0.7865, nT:167402, nP:3.7721, nB:0.778
Cond:6695, Score:5045.774, sT:53494, sP:3.134, sB:0.7875, nT:167183, nP:3.7767, nB:0.7789 , T3:5059,7922,6695,  #End#
LowScoreRank2 , T0:1 , T1:11 , T2:
Cond:5059, Score:4986.922, sT:62588, sP:3.0227, sB:0.6679, nT:193910, nP:3.5866, nB:0.6472
Cond:6695, Score:4972.774, sT:61887, sP:3.0238, sB:0.6725, nT:191247, nP:3.5905, nB:0.6537
Cond:7922, Score:4970.817, sT:61818, sP:3.0233, sB:0.6726, nT:190921, nP:3.5873, nB:0.6547 , T3:5059,6695,7922,  #End#
LowScoreRank2 , T0:2 , T1:11 , T2:
Cond:5285, Score:4618.583, sT:56585, sP:3.0635, sB:0.6387, nT:177797, nP:3.6241, nB:0.7883
Cond:6695, Score:4618.566, sT:56250, sP:3.0653, sB:0.6422, nT:176628, nP:3.6259, nB:0.7929
Cond:6903, Score:4616.98, sT:56331, sP:3.0656, sB:0.6413, nT:176912, nP:3.6257, nB:0.7913 , T3:5285,6695,6903,  #End#
LowScoreRank2 , T0:3 , T1:11 , T2:
Cond:5059, Score:5045.291, sT:55197, sP:3.0679, sB:0.7562, nT:170206, nP:3.6295, nB:0.7474
Cond:6695, Score:5039.168, sT:54603, sP:3.0703, sB:0.7632, nT:167932, nP:3.6326, nB:0.7536
Cond:7922, Score:5038.856, sT:54662, sP:3.0676, sB:0.7619, nT:168158, nP:3.6282, nB:0.7525 , T3:5059,6695,7922,  #End#
LowScoreRank2 , T0:4 , T1:11 , T2:
Cond:5059, Score:4956.771, sT:57415, sP:3.1276, sB:0.7266, nT:180194, nP:3.7404, nB:0.7165
Cond:2189, Score:4950.569, sT:57318, sP:3.1359, sB:0.7279, nT:179079, nP:3.7461, nB:0.7204
Cond:2998, Score:4950.276, sT:57550, sP:3.1389, sB:0.724, nT:179926, nP:3.7473, nB:0.7238 , T3:5059,2189,2998,  #End#
LowScoreRank2 , T0:5 , T1:11 , T2:
Cond:5059, Score:5041.279, sT:57561, sP:3.3061, sB:0.7623, nT:173500, nP:3.7764, nB:0.7647
Cond:7922, Score:5036.285, sT:56991, sP:3.3084, sB:0.7688, nT:171347, nP:3.7772, nB:0.7707
Cond:6695, Score:5036.104, sT:56933, sP:3.3113, sB:0.77, nT:171124, nP:3.7817, nB:0.7717 , T3:5059,7922,6695,  #End#




////////////////////////////////////////////////////////////////////

 
 LowScoreRank2 , T0:0 , T1:12 , T2:
Cond:6130, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:51, Score:5075.763, sT:53628, sP:3.1453, sB:0.8006, nT:166934, nP:3.7982, nB:0.759
Cond:6148, Score:5066.355, sT:54074, sP:3.1302, sB:0.7828, nT:169390, nP:3.7716, nB:0.773 , T3:6130,51,6148,  #End#
LowScoreRank2 , T0:1 , T1:12 , T2:
Cond:2796, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:4380, Score:5076.196, sT:58332, sP:3.0539, sB:0.7233, nT:179942, nP:3.6156, nB:0.7171
Cond:4364, Score:5065.506, sT:56746, sP:3.0601, sB:0.7389, nT:174868, nP:3.6224, nB:0.7374 , T3:2796,4380,4364,  #End#
LowScoreRank2 , T0:2 , T1:12 , T2:
Cond:737, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:51, Score:4992.931, sT:54911, sP:3.1046, sB:0.7482, nT:168867, nP:3.6792, nB:0.7832
Cond:65, Score:4986.994, sT:55762, sP:3.0803, sB:0.7257, nT:173749, nP:3.65, nB:0.7873 , T3:737,51,65,  #End#
LowScoreRank2 , T0:3 , T1:12 , T2:
Cond:8046, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:8446, Score:5089.662, sT:53577, sP:3.0878, sB:0.7836, nT:164968, nP:3.654, nB:0.7849
Cond:6206, Score:5086.601, sT:53310, sP:3.0907, sB:0.7867, nT:164104, nP:3.6571, nB:0.7892 , T3:8046,8446,6206,  #End#
LowScoreRank2 , T0:4 , T1:12 , T2:
Cond:8354, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:8368, Score:5068.272, sT:55724, sP:3.1011, sB:0.7577, nT:173229, nP:3.6856, nB:0.7509
Cond:8356, Score:5026.834, sT:56190, sP:3.1081, sB:0.7472, nT:175577, nP:3.7101, nB:0.7398 , T3:8354,8368,8356,  #End#
LowScoreRank2 , T0:5 , T1:12 , T2:
Cond:8344, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:8358, Score:5059.498, sT:56529, sP:3.239, sB:0.7665, nT:171431, nP:3.7453, nB:0.7716
Cond:51, Score:5054.175, sT:57073, sP:3.3221, sB:0.7808, nT:170740, nP:3.8014, nB:0.751 , T3:8344,8358,51,  #End#
LowScoreRank2 , T0:6 , T1:0 , T2:
Cond:1, Score:4902.948, sT:49072, sP:3.1387, sB:0.824, nT:149651, nP:3.7132, nB:0.8233
Cond:3, Score:4902.948, sT:49072, sP:3.1387, sB:0.824, nT:149651, nP:3.7132, nB:0.8233
Cond:5, Score:4894.97, sT:49035, sP:3.1399, sB:0.8234, nT:149505, nP:3.7145, nB:0.8228 , T3:1,3,5,  #End#
LowScoreRank2 , T0:6 , T1:1 , T2:
Cond:1, Score:4901.191, sT:48669, sP:3.0555, sB:0.8097, nT:156184, nP:3.6789, nB:0.8071
Cond:3, Score:4901.191, sT:48669, sP:3.0555, sB:0.8097, nT:156184, nP:3.6789, nB:0.8071
Cond:5, Score:4892.778, sT:48632, sP:3.0566, sB:0.809, nT:156038, nP:3.6801, nB:0.8066 , T3:1,3,5,  #End#
LowScoreRank2 , T0:6 , T1:2 , T2:
Cond:51, Score:5041.657, sT:51366, sP:3.1134, sB:0.8187, nT:156562, nP:3.6936, nB:0.7844
Cond:2786, Score:5039.359, sT:51352, sP:3.1045, sB:0.8081, nT:156678, nP:3.6691, nB:0.8109
Cond:8446, Score:5033.879, sT:51316, sP:3.1011, sB:0.8064, nT:157258, nP:3.6713, nB:0.8103 , T3:51,2786,8446,  #End#
LowScoreRank2 , T0:6 , T1:3 , T2:
Cond:51, Score:5078.319, sT:52355, sP:3.1077, sB:0.8096, nT:159875, nP:3.6868, nB:0.7781
Cond:8446, Score:5070.58, sT:52305, sP:3.0957, sB:0.7976, nT:160568, nP:3.665, nB:0.8034
Cond:5334, Score:5068.022, sT:52753, sP:3.0945, sB:0.792, nT:162224, nP:3.6628, nB:0.7931 , T3:51,8446,5334,  #End#
LowScoreRank2 , T0:6 , T1:4 , T2:
Cond:51, Score:5034.878, sT:50192, sP:3.0086, sB:0.827, nT:150438, nP:3.5839, nB:0.754
Cond:2786, Score:5009.107, sT:50260, sP:3.0024, sB:0.8108, nT:150243, nP:3.5589, nB:0.7825
Cond:305, Score:5008.573, sT:50736, sP:2.9985, sB:0.8061, nT:152580, nP:3.5623, nB:0.7638 , T3:51,2786,305,  #End#
LowScoreRank2 , T0:6 , T1:5 , T2:
Cond:1, Score:4485.605, sT:42129, sP:2.924, sB:0.8368, nT:114714, nP:3.2757, nB:0.8071
Cond:3, Score:4485.605, sT:42129, sP:2.924, sB:0.8368, nT:114714, nP:3.2757, nB:0.8071
Cond:5, Score:4477.095, sT:42092, sP:2.9252, sB:0.8361, nT:114568, nP:3.277, nB:0.8065 , T3:1,3,5,  #End#
LowScoreRank2 , T0:6 , T1:6 , T2:
Cond:51, Score:5073.419, sT:52044, sP:3.1191, sB:0.8159, nT:158460, nP:3.6966, nB:0.781
Cond:2786, Score:5065.053, sT:51953, sP:3.111, sB:0.8055, nT:158270, nP:3.673, nB:0.808
Cond:8446, Score:5062.762, sT:51995, sP:3.107, sB:0.8032, nT:159153, nP:3.6746, nB:0.8065 , T3:51,2786,8446,  #End#
LowScoreRank2 , T0:6 , T1:7 , T2:
Cond:51, Score:5085.362, sT:51696, sP:3.1107, sB:0.819, nT:157863, nP:3.6917, nB:0.7918
Cond:2786, Score:5078.3, sT:51616, sP:3.1017, sB:0.8085, nT:157703, nP:3.668, nB:0.8188
Cond:5582, Score:5075.048, sT:51870, sP:3.1, sB:0.8042, nT:159500, nP:3.6702, nB:0.8112 , T3:51,2786,5582,  #End#
LowScoreRank2 , T0:6 , T1:8 , T2:
Cond:8446, Score:5035.747, sT:51648, sP:3.0676, sB:0.7957, nT:159043, nP:3.662, nB:0.8048
Cond:5334, Score:5033.225, sT:52095, sP:3.0666, sB:0.7901, nT:160698, nP:3.6599, nB:0.7944
Cond:8164, Score:5033.207, sT:52154, sP:3.0645, sB:0.789, nT:160833, nP:3.6579, nB:0.7935 , T3:8446,5334,8164,  #End#
LowScoreRank2 , T0:6 , T1:9 , T2:
Cond:51, Score:5051.974, sT:51589, sP:3.1168, sB:0.8152, nT:157177, nP:3.698, nB:0.7935
Cond:8446, Score:5050.756, sT:51544, sP:3.1049, sB:0.8044, nT:157936, nP:3.6756, nB:0.8186
Cond:2786, Score:5047.35, sT:51508, sP:3.1083, sB:0.8052, nT:157030, nP:3.6739, nB:0.8208 , T3:51,8446,2786,  #End#
LowScoreRank2 , T0:6 , T1:10 , T2:
Cond:51, Score:5087.43, sT:52147, sP:3.1079, sB:0.813, nT:158898, nP:3.6748, nB:0.7848
Cond:2786, Score:5083.545, sT:52059, sP:3.0998, sB:0.8034, nT:158733, nP:3.6515, nB:0.8119
Cond:8446, Score:5081.699, sT:52096, sP:3.096, sB:0.8014, nT:159592, nP:3.6529, nB:0.8101 , T3:51,2786,8446,  #End#
LowScoreRank2 , T0:6 , T1:11 , T2:
Cond:51, Score:5085.269, sT:51903, sP:3.1141, sB:0.818, nT:158257, nP:3.6938, nB:0.7862
Cond:8446, Score:5079.695, sT:51857, sP:3.1018, sB:0.8062, nT:158957, nP:3.6717, nB:0.8118
Cond:2784, Score:5079.043, sT:52303, sP:3.1, sB:0.8007, nT:160433, nP:3.6678, nB:0.8022 , T3:51,8446,2784,  #End#
LowScoreRank2 , T0:6 , T1:12 , T2:
Cond:51, Score:5113.933, sT:52608, sP:3.111, sB:0.8124, nT:160907, nP:3.6894, nB:0.78
Cond:8446, Score:5105.846, sT:52558, sP:3.0991, sB:0.8004, nT:161600, nP:3.6678, nB:0.8051
Cond:5334, Score:5103.797, sT:53006, sP:3.0978, sB:0.7949, nT:163256, nP:3.6655, nB:0.7948 , T3:51,8446,5334,  #End#
LowScoreRank2 , T0:0 , T1:12 , T2:
Cond:2998, Score:5073.429, sT:54623, sP:3.1302, sB:0.7756, nT:171073, nP:3.7675, nB:0.7725
Cond:7922, Score:5073.362, sT:54233, sP:3.1278, sB:0.7814, nT:169989, nP:3.7669, nB:0.7716
Cond:6903, Score:5070.205, sT:54256, sP:3.1307, sB:0.7808, nT:170041, nP:3.771, nB:0.7725 , T3:2998,7922,6903,  #End#
LowScoreRank2 , T0:1 , T1:12 , T2:
Cond:7922, Score:5004.179, sT:62739, sP:3.0207, sB:0.6688, nT:194459, nP:3.5829, nB:0.6466
Cond:2998, Score:5001.603, sT:63134, sP:3.0232, sB:0.6639, nT:195555, nP:3.5844, nB:0.648
Cond:145, Score:4998.212, sT:62809, sP:3.0186, sB:0.6671, nT:194220, nP:3.5838, nB:0.6465 , T3:7922,2998,145,  #End#
LowScoreRank2 , T0:2 , T1:12 , T2:
Cond:6903, Score:4632.538, sT:57020, sP:3.0629, sB:0.6357, nT:179513, nP:3.6228, nB:0.7864
Cond:621, Score:4632.514, sT:57229, sP:3.0663, sB:0.6337, nT:179831, nP:3.624, nB:0.787
Cond:7337, Score:4630.012, sT:57157, sP:3.0636, sB:0.6344, nT:179947, nP:3.6226, nB:0.7835 , T3:6903,621,7337,  #End#
LowScoreRank2 , T0:3 , T1:12 , T2:
Cond:621, Score:5062.274, sT:55577, sP:3.0716, sB:0.7545, nT:171120, nP:3.6305, nB:0.7481
Cond:7922, Score:5061.811, sT:55346, sP:3.0655, sB:0.7568, nT:170750, nP:3.6252, nB:0.7464
Cond:2998, Score:5060.641, sT:55734, sP:3.0681, sB:0.7511, nT:171837, nP:3.6266, nB:0.7474 , T3:621,7922,2998,  #End#
LowScoreRank2 , T0:4 , T1:12 , T2:
Cond:2189, Score:4983.981, sT:58028, sP:3.1331, sB:0.7247, nT:181772, nP:3.7418, nB:0.7158
Cond:2998, Score:4979.391, sT:58301, sP:3.1354, sB:0.7197, nT:182726, nP:3.7421, nB:0.7181
Cond:621, Score:4978.922, sT:58089, sP:3.1368, sB:0.7239, nT:181916, nP:3.7434, nB:0.7147 , T3:2189,2998,621,  #End#
LowScoreRank2 , T0:5 , T1:12 , T2:
Cond:2998, Score:5058.75, sT:58098, sP:3.3041, sB:0.7575, nT:175128, nP:3.7723, nB:0.7646
Cond:7922, Score:5057.709, sT:57710, sP:3.3031, sB:0.7629, nT:174044, nP:3.7717, nB:0.7637
Cond:6487, Score:5054.835, sT:57611, sP:3.3066, sB:0.7641, nT:173717, nP:3.7762, nB:0.7651 , T3:2998,7922,6487,  #End#
LowScoreRank2 , T0:6 , T1:0 , T2:
Cond:3444, Score:5126.941, sT:51330, sP:3.0888, sB:0.8188, nT:156067, nP:3.6501, nB:0.8282
Cond:472, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:1604, Score:5071.527, sT:50816, sP:3.1168, sB:0.8227, nT:156217, nP:3.7094, nB:0.8238 , T3:3444,472,1604,  #End#
LowScoreRank2 , T0:6 , T1:1 , T2:
Cond:66, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:5904, Score:4930.806, sT:50216, sP:3.0281, sB:0.7853, nT:161445, nP:3.641, nB:0.7951
Cond:3164, Score:4912.29, sT:50330, sP:3.0604, sB:0.785, nT:163700, nP:3.6993, nB:0.7951 , T3:66,5904,3164,  #End#
LowScoreRank2 , T0:6 , T1:2 , T2:
Cond:1977, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:1081, Score:5084.151, sT:52787, sP:3.0956, sB:0.7959, nT:162197, nP:3.6583, nB:0.7895
Cond:1289, Score:5054.019, sT:52886, sP:3.101, sB:0.7893, nT:162481, nP:3.6671, nB:0.7901 , T3:1977,1081,1289,  #End#
LowScoreRank2 , T0:6 , T1:3 , T2:
Cond:1739, Score:5094.977, sT:53007, sP:3.0946, sB:0.7933, nT:162954, nP:3.6621, nB:0.7931
Cond:2203, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:843, Score:5091.154, sT:53403, sP:3.1003, sB:0.7887, nT:163932, nP:3.6642, nB:0.7886 , T3:1739,2203,843,  #End#
LowScoreRank2 , T0:6 , T1:4 , T2:
Cond:1618, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:1602, Score:5067.857, sT:51481, sP:3.045, sB:0.8028, nT:156038, nP:3.5901, nB:0.7999
Cond:353, Score:5067.529, sT:53257, sP:3.0024, sB:0.781, nT:159204, nP:3.5359, nB:0.7499 , T3:1618,1602,353,  #End#
LowScoreRank2 , T0:6 , T1:5 , T2:
Cond:7436, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:8298, Score:4966.88, sT:52325, sP:2.9857, sB:0.7597, nT:160676, nP:3.4695, nB:0.7698
Cond:7868, Score:4934.676, sT:53073, sP:3.059, sB:0.759, nT:163862, nP:3.6047, nB:0.7662 , T3:7436,8298,7868,  #End#
LowScoreRank2 , T0:6 , T1:6 , T2:
Cond:4954, Score:5102.428, sT:52963, sP:3.1028, sB:0.7964, nT:162956, nP:3.6705, nB:0.7954
Cond:7642, Score:5099.724, sT:52906, sP:3.1025, sB:0.7969, nT:162764, nP:3.6695, nB:0.7948
Cond:7880, Score:5095.895, sT:53167, sP:3.0956, sB:0.791, nT:163943, nP:3.6624, nB:0.7912 , T3:4954,7642,7880,  #End#
LowScoreRank2 , T0:6 , T1:7 , T2:
Cond:2639, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:1311, Score:5090.906, sT:52677, sP:3.0923, sB:0.7954, nT:161942, nP:3.6596, nB:0.8001
Cond:1743, Score:5088.089, sT:52722, sP:3.0937, sB:0.7947, nT:162057, nP:3.6632, nB:0.7994 , T3:2639,1311,1743,  #End#
LowScoreRank2 , T0:6 , T1:8 , T2:
Cond:52, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:24, Score:5045.413, sT:52990, sP:3.0663, sB:0.7807, nT:162947, nP:3.6538, nB:0.7857
Cond:7922, Score:5044.057, sT:52312, sP:3.0625, sB:0.7882, nT:161427, nP:3.653, nB:0.7925 , T3:52,24,7922,  #End#
LowScoreRank2 , T0:6 , T1:9 , T2:
Cond:6717, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:6697, Score:5057.512, sT:52534, sP:3.0987, sB:0.7917, nT:161453, nP:3.6679, nB:0.8028
Cond:7922, Score:5057.207, sT:52220, sP:3.0984, sB:0.7959, nT:160303, nP:3.666, nB:0.8065 , T3:6717,6697,7922,  #End#
LowScoreRank2 , T0:6 , T1:10 , T2:
Cond:6433, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:621, Score:5090.439, sT:52998, sP:3.097, sB:0.7913, nT:162361, nP:3.6496, nB:0.7993
Cond:4641, Score:5090.369, sT:52859, sP:3.0915, sB:0.793, nT:162384, nP:3.6528, nB:0.7967 , T3:6433,621,4641,  #End#
LowScoreRank2 , T0:6 , T1:11 , T2:
Cond:5059, Score:5094.897, sT:53065, sP:3.0963, sB:0.7921, nT:163418, nP:3.6636, nB:0.7939
Cond:6695, Score:5088.489, sT:52473, sP:3.0991, sB:0.7997, nT:161152, nP:3.6672, nB:0.801
Cond:7922, Score:5088.186, sT:52532, sP:3.0962, sB:0.7983, nT:161378, nP:3.6626, nB:0.7997 , T3:5059,6695,7922,  #End#
LowScoreRank2 , T0:6 , T1:12 , T2:
Cond:621, Score:5111.816, sT:53445, sP:3.1, sB:0.7901, nT:164332, nP:3.6645, nB:0.7944
Cond:7922, Score:5111.416, sT:53214, sP:3.0937, sB:0.7926, nT:163962, nP:3.659, nB:0.7927
Cond:2998, Score:5110.515, sT:53602, sP:3.0963, sB:0.7865, nT:165046, nP:3.6603, nB:0.7935 , T3:621,7922,2998,  #End#
End , T0:04:41:58.2458547  #End#
 
 
 
 
 */

		};
		private static readonly int[] KouhoAnds = new int[] {
			AllTrueCondIdx
		};
		private static readonly int[] KouhoOrs = new int[] {
			//AllTrueCondIdx-1

		};
		private const int AllCond51Num = 3754886; // 2000日*2500銘柄
		private const double AllCond51Ratio = -0.000912;
		private const double PeriodPow = 0.65;
		private const int NoSkipRatio = 8;
		/** 51条件の全検証 */
		public static void CheckCond51All()
		{
			int[] confirmAnds = ConfirmAnds;
			int[] confirmOrs = ConfirmOrs;

			if (IsAndCheck) {
				for (int i = -1; i < confirmAnds.Length; i++) {
					CheckCond51AllBase(confirmAnds, confirmOrs, i, -1);
				}
			} else {
				for (int i = -1; i < confirmOrs.Length; i++) {
					//for (int i = -1; i <= 1; i++) {
					CheckCond51AllBase(confirmAnds, confirmOrs, -1, i);
				}
				//CheckCond51AllBase(confirmAnds, confirmOrs, -1, 8);
			}

		}
		private static void CheckCond51AllBase(int[] confirmAnds, int[] confirmOrs, int andSkip, int orSkip)
		{
			int idx = andSkip == -1 ? (orSkip == -1 ? -1 : confirmOrs[orSkip]) : confirmAnds[andSkip];

			bool isOrOkForce = IsAndCheck && ConfirmOrs.Length == 0 && KouhoOrs.Length == 0; // orチェックを強制でOKにしておく

			List<string> codeList = CsvControll.GetCodeList();

			// 確定条件と候補条件について コード*日付分の情報を保存 andは一個でもfalseならそいつはアウト symbol=>[日付1,...]でfalseを保存
			Dictionary<string, HashSet<string>> beforeNotAnd = new Dictionary<string, HashSet<string>>();
			// beforeNotAndがfalseのものはスルー orは一個でもtrueならそいつはOK
			Dictionary<string, HashSet<string>> beforeOr = new Dictionary<string, HashSet<string>>();
			// beforeNotAndがfalseのものはスルー
			Dictionary<string, HashSet<string>>[] beforeNotAndKouho = new Dictionary<string, HashSet<string>>[KouhoAnds.Length];
			// beforeNotAndがfalseのものはスルー beforeOrがtrueのものはスルー
			Dictionary<string, HashSet<string>>[] beforeOrKouho = new Dictionary<string, HashSet<string>>[KouhoOrs.Length];
			foreach (string symbol in codeList) {
				beforeNotAnd[symbol] = new HashSet<string>();
				for (int i = 0; i < confirmAnds.Length; i++) {
					if (andSkip == i) continue;
					int condIdx = confirmAnds[i];
					(int pIdx, int ratioIdx, int diffDayIdx, bool isT) = SplitCondIdx(condIdx);
					foreach (string[] cond51 in CsvControll.GetCond51All(symbol, diffDayIdx, ratioIdx)) {
						if ((cond51[pIdx + 1] == "1") != isT) beforeNotAnd[symbol].Add(cond51[0]);
					}
				}
				beforeOr[symbol] = new HashSet<string>();
				for (int i = 0; i < confirmOrs.Length; i++) {
					if (orSkip == i) continue;
					int condIdx = confirmOrs[i];
					(int pIdx, int ratioIdx, int diffDayIdx, bool isT) = SplitCondIdx(condIdx);
					foreach (string[] cond51 in CsvControll.GetCond51All(symbol, diffDayIdx, ratioIdx)) {
						if (beforeNotAnd[symbol].Contains(cond51[0])) continue;
						if ((cond51[pIdx + 1] == "1") == isT) beforeOr[symbol].Add(cond51[0]);
					}
				}

				for (int i = 0; i < KouhoAnds.Length; i++) {
					if (beforeNotAndKouho[i] == null) beforeNotAndKouho[i] = new Dictionary<string, HashSet<string>>();
					beforeNotAndKouho[i][symbol] = new HashSet<string>();
					(int pIdx, int ratioIdx, int diffDayIdx, bool isT) = SplitCondIdx(KouhoAnds[i]);
					foreach (string[] cond51 in CsvControll.GetCond51All(symbol, diffDayIdx, ratioIdx)) {
						if (beforeNotAnd[symbol].Contains(cond51[0])) continue;
						if ((cond51[pIdx + 1] == "1") != isT) beforeNotAndKouho[i][symbol].Add(cond51[0]);
					}
				}
				for (int i = 0; i < KouhoOrs.Length; i++) {
					if (beforeOrKouho[i] == null) beforeOrKouho[i] = new Dictionary<string, HashSet<string>>();
					beforeOrKouho[i][symbol] = new HashSet<string>();
					(int pIdx, int ratioIdx, int diffDayIdx, bool isT) = SplitCondIdx(KouhoOrs[i]);
					foreach (string[] cond51 in CsvControll.GetCond51All(symbol, diffDayIdx, ratioIdx)) {
						if (beforeNotAnd[symbol].Contains(cond51[0])) continue;
						if (beforeOr[symbol].Contains(cond51[0])) continue;
						if ((cond51[pIdx + 1] == "1") == isT) beforeOrKouho[i][symbol].Add(cond51[0]);
					}
				}
			}

			int kouhoNum = KouhoAnds.Length > 0 ? KouhoAnds.Length : KouhoOrs.Length;
			int[] kouhoList = KouhoAnds.Length > 0 ? KouhoAnds : KouhoOrs;


			int[,,] benefitAll = new int[kouhoNum, condNum(), 2];
			int[,,] havePeriodAll = new int[kouhoNum, condNum(), 2];
			int[,,] trueAll = new int[kouhoNum, condNum(), 2];



			if (false) {
				codeList = new List<string>();
				int aaa = 0;
				foreach (string code in CsvControll.GetCodeList()) {
					codeList.Add(code); aaa++;
					if (aaa >= 30) break;
				}
			}


			foreach (string symbol in codeList) {

				/*
				int[,,] benefitAllPs = new int[kouhoNum, condNum(), codeList.Count];
				int[,,] havePeriodAllPs = new int[kouhoNum, condNum(), codeList.Count];
				int[,,] trueAllPs = new int[kouhoNum, condNum(), codeList.Count];
				ParallelOptions parallelOptions = new ParallelOptions();
				parallelOptions.MaxDegreeOfParallelism = 2;
				Parallel.For(0, codeList.Count, parallelOptions, p => {
					string symbol = codeList[p];
					int[,] benefitAllP = new int[kouhoNum, condNum()];
					int[,] havePeriodAllP = new int[kouhoNum, condNum()];
					int[,] trueAllP = new int[kouhoNum, condNum()];

					*/

				// todo こいつらはstaticに持っておくか？
				Dictionary<string, int> benefits = new Dictionary<string, int>();
				Dictionary<string, int> havePeriods = new Dictionary<string, int>();
				foreach (string[] benefitInfo in CsvControll.GetBenefitAll(symbol)) {
					benefits[benefitInfo[0]] = Int32.Parse(benefitInfo[1]);
					havePeriods[benefitInfo[0]] = Int32.Parse(benefitInfo[2]);
				}

				for (int diffDayIdx = 0; diffDayIdx < diffDayList.Length; diffDayIdx++) {
					for (int ratioIdx = 0; ratioIdx < ratioList.Length; ratioIdx++) {
						List<string[]> cond51All = CsvControll.GetCond51All(symbol, diffDayIdx, ratioIdx);
						for (int pIdx = 0; pIdx < periodCntList.GetLength(0); pIdx++) {
							foreach (bool isT in new bool[2] { true, false }) {
								int condIdx = GetCondIdx(pIdx, ratioIdx, diffDayIdx, isT);
								if (Array.IndexOf(NotCond, condIdx) >= 0 || Array.IndexOf(ConfirmOrs, condIdx) >= 0 || Array.IndexOf(KouhoOrs, condIdx) >= 0) continue;
								int[] nowHaves = new int[kouhoNum];
								for (int c = 0; c < cond51All.Count; c++) {
									string[] cond51 = cond51All[c];

									if (beforeNotAnd[symbol].Contains(cond51[0])) continue;
									if (IsAndCheck && (cond51[pIdx + 1] == "1") != isT) continue;
									if (!benefits.ContainsKey(cond51[0])) continue;
									bool isOrCheck = isOrOkForce || (!IsAndCheck && (cond51[pIdx + 1] == "1") == isT) || beforeOr[symbol].Contains(cond51[0]);

									if (KouhoAnds.Length > 0) {
										if (!isOrCheck) continue;
										for (int i = 0; i < KouhoAnds.Length; i++) {
											if (beforeNotAndKouho[i][symbol].Contains(cond51[0])) continue;

											benefitAll[i, condIdx, 0] += benefits[cond51[0]];
											havePeriodAll[i, condIdx, 0] += havePeriods[cond51[0]];
											trueAll[i, condIdx, 0]++;

											if (nowHaves[i] > c) continue;
											benefitAll[i, condIdx, 1] += benefits[cond51[0]];
											havePeriodAll[i, condIdx, 1] += havePeriods[cond51[0]];
											trueAll[i, condIdx, 1]++;
											nowHaves[i] = c + havePeriods[cond51[0]] + 1;
										}
									} else if (KouhoOrs.Length > 0) {
										// 残るはORチェック
										for (int i = 0; i < KouhoOrs.Length; i++) {
											if (!isOrCheck && !beforeOrKouho[i][symbol].Contains(cond51[0])) continue;
											benefitAll[i, condIdx, 0] += benefits[cond51[0]];
											havePeriodAll[i, condIdx, 0] += havePeriods[cond51[0]];
											trueAll[i, condIdx, 0]++;

											if (nowHaves[i] > c) continue;
											benefitAll[i, condIdx, 1] += benefits[cond51[0]];
											havePeriodAll[i, condIdx, 1] += havePeriods[cond51[0]];
											trueAll[i, condIdx, 1]++;
											nowHaves[i] = c + havePeriods[cond51[0]] + 1;
										}
									} else {

									}
								}
							}
						}
					}
				}

				//Common.DebugInfo("CheckCond51AllSymbol", symbol);

				/*
				for (int i = 0; i < kouhoNum; i++) {
					for (int j = 0; j < condNum(); j++) {
						benefitAllPs[i, j, p] = benefitAllP[i, j];
						havePeriodAllPs[i, j, p] = havePeriodAllP[i, j];
						trueAllPs[i, j, p] = trueAllP[i, j];
					}
				}

				Console.WriteLine("CheckCond51AllSymbol:" + symbol + " End ");
			});

			for (int i = 0; i < kouhoNum; i++) {
				for (int j = 0; j < condNum(); j++) {
					for (int p = 0; p < codeList.Count; p++) {
						benefitAll[i, j] += benefitAllPs[i, j, p];
						havePeriodAll[i, j] += havePeriodAllPs[i, j, p];
						trueAll[i, j] += trueAllPs[i, j, p];
					}
				}
			}
			*/

			}



			// 並び変えるか
			int maxNum = 30;
			for (int i = 0; i < kouhoNum; i++) {
				Dictionary<int, double> noBenefit = new Dictionary<int, double>();
				Dictionary<int, double> skipBenefit = new Dictionary<int, double>();
				Dictionary<int, double> noPeriod = new Dictionary<int, double>();
				Dictionary<int, double> skipPeriod = new Dictionary<int, double>();
				Dictionary<int, double> scores = new Dictionary<int, double>();
				Dictionary<int, double> scores2 = new Dictionary<int, double>();
				Dictionary<int, double> scores3 = new Dictionary<int, double>();
				Dictionary<int, double> scores4 = new Dictionary<int, double>();
				int tMin = AllCond51Num; int tMax = 0;
				double maxBenefit = 0; double minBenefit = 9999;
				double baseBenefit = 0;
				for (int j = 0; j < condNum(); j++) {
					if (trueAll[i, j, 1] == 0) continue;
					noBenefit[j] = Common.Round((double)benefitAll[i, j, 0] / (double)trueAll[i, j, 0], 4);
					noPeriod[j] = Common.Round((double)havePeriodAll[i, j, 0] / (double)trueAll[i, j, 0], 4);
					skipBenefit[j] = Common.Round((double)benefitAll[i, j, 1] / (double)trueAll[i, j, 1], 4);
					skipPeriod[j] = Common.Round((double)havePeriodAll[i, j, 1] / (double)trueAll[i, j, 1], 4);

					scores[j] = Common.Round(Math.Pow(trueAll[i, j, 1], 0.75) * skipBenefit[j] / Math.Pow(skipPeriod[j], PeriodPow)
						+ Math.Pow(trueAll[i, j, 0], 0.75) * noBenefit[j] / Math.Pow(noPeriod[j], PeriodPow) / NoSkipRatio, 3);
					scores2[j] = Common.Round(Math.Pow(trueAll[i, j, 1], 0.8) * skipBenefit[j] / Math.Pow(skipPeriod[j], PeriodPow)
						+ Math.Pow(trueAll[i, j, 0], 0.8) * noBenefit[j] / Math.Pow(noPeriod[j], PeriodPow) / NoSkipRatio, 3);
					scores3[j] = Common.Round(Math.Pow(trueAll[i, j, 1], 0.85) * skipBenefit[j] / Math.Pow(skipPeriod[j], PeriodPow)
						+ Math.Pow(trueAll[i, j, 0], 0.85) * noBenefit[j] / Math.Pow(noPeriod[j], PeriodPow) / NoSkipRatio, 3);
					scores4[j] = Common.Round(Math.Pow(trueAll[i, j, 1], 0.9) * skipBenefit[j] / Math.Pow(skipPeriod[j], PeriodPow)
						+ Math.Pow(trueAll[i, j, 0], 0.9) * noBenefit[j] / Math.Pow(noPeriod[j], PeriodPow) / NoSkipRatio, 3);

					/*
					if (tMin > trueAll[i, j]) {
						tMin = trueAll[i, j];
						if (!IsAndCheck) baseBenefit = benefitRes[j];
					}
					if (tMax < trueAll[i, j]) {
						tMax = trueAll[i, j];
						if (IsAndCheck) baseBenefit = benefitRes[j];
					}
					maxBenefit = Math.Max(maxBenefit, benefitRes[j]); minBenefit = Math.Min(minBenefit, benefitRes[j]);
					*/
				}
				/*
				double needNum = tMax * 0.6;
				double needBenefit = 0;
				if (IsAndCheck) {
					needNum = tMax * 0.75;
					needBenefit = baseBenefit * 1.05;
				} else {
					needNum = tMin + 1000;
					needBenefit = baseBenefit * 0.8;
				}

				int max = maxNum;
				string result = "";
				string result2 = "";
				// OrderByDescending:高い順、OrderBy：低い順

				var rankRes = benefitRes.Where(c => trueAll[i, c.Key] >= needNum && c.Value >= needBenefit);
				*/
				for (int r = 2; r <= 2; r++) {
					string result = ""; string result2 = ""; int max = 3;
					foreach (KeyValuePair<int, double> b in (r == 0 ? scores : r == 1 ? scores2 : r == 2 ? scores3 : scores4).OrderByDescending(c => trueAll[i, c.Key, 1] > 50000 ? c.Value : -999)) {
						if (max > 0) {
							result += "\nCond:" + b.Key + ", Score:" + b.Value + ", sT:" + trueAll[i, b.Key, 1] + ", sP:" + skipPeriod[b.Key] + ", sB:" + skipBenefit[b.Key]
								+ ", nT:" + trueAll[i, b.Key, 0] + ", nP:" + noPeriod[b.Key] + ", nB:" + noBenefit[b.Key];
							result2 += b.Key + ",";
						}
						max--;
					}
					Common.DebugInfo("LowScoreRank" + r, idx, kouhoList[i], result, result2);
				}

				/*
				maxBenefit = 0;
				foreach (KeyValuePair<int, double> b in rankRes.OrderByDescending(c => c.Value)) {
					if (max > 0) {
						double tr = (AllCond51Num * AllCond51Ratio - trueAll[i, b.Key] * b.Value) / (AllCond51Num - trueAll[i, b.Key]);
						result += "\nCond:" + b.Key + ", T:" + trueAll[i, b.Key] + ", TR:" + tr + ", Period:" + havePeriodRes[b.Key] + ", Benefit" + b.Value + ",";
						result2 += b.Key + ",";
						maxBenefit = Math.Max(maxBenefit, b.Value);
					}
					max--;
				}
				Common.DebugInfo("LowScoreRank1", kouhoList[i], result, result2);


				result = "";
				result2 = "";
				max = 30;
				foreach (KeyValuePair<int, double> b in rankRes.OrderByDescending(c =>
					//c.Value >= maxBenefit * 0.5 & trueAll[i, c.Key] >= needNum ?
					(AllCond51Num * AllCond51Ratio - trueAll[i, c.Key] * c.Value) / (AllCond51Num - trueAll[i, c.Key])
				)) {
					if (max > 0) {
						double tr = (AllCond51Num * AllCond51Ratio - trueAll[i, b.Key] * b.Value) / (AllCond51Num - trueAll[i, b.Key]);
						result += "\nCond:" + b.Key + ", T:" + trueAll[i, b.Key] + ", TR:" + tr + ", Period:" + havePeriodRes[b.Key] + ", Benefit" + b.Value + ",";
						result2 += b.Key + ",";
					}
					max--;
				}
				//Common.DebugInfo("LowScoreRank2", kouhoList[i], result, result2);


				result = "";
				result2 = "";
				max = 30;
				foreach (KeyValuePair<int, double> b2 in rankRes.OrderByDescending(c => trueAll[i, c.Key])) {
					if (max > 0) {
						double tr = (AllCond51Num * AllCond51Ratio - trueAll[i, b2.Key] * b2.Value) / (AllCond51Num - trueAll[i, b2.Key]);
						result += "\nCond:" + b2.Key + ", T:" + trueAll[i, b2.Key] + ", TR:" + tr + ", Period:" + havePeriodRes[b2.Key] + ", Benefit" + b2.Value + ",";
						result2 += b2.Key + ",";
					}
					max--;
				}
				Common.DebugInfo("LowScoreRank3", kouhoList[i], result, result2);
				result = "";
				result2 = "";
				max = 30;
				foreach (KeyValuePair<int, double> b in rankRes.OrderBy(c => trueAll[i, c.Key])) {
					if (max > 0) {
						double tr = (AllCond51Num * AllCond51Ratio - trueAll[i, b.Key] * b.Value) / (AllCond51Num - trueAll[i, b.Key]);
						result += "\nCond:" + b.Key + ", T:" + trueAll[i, b.Key] + ", TR:" + tr + ", Period:" + havePeriodRes[b.Key] + ", Benefit" + b.Value + ",";
						result2 += b.Key + ",";
					}
					max--;
				}
				Common.DebugInfo("LowScoreRank4", kouhoList[i], result, result2);
				*/


			}

		}




		public static void CheckCond51All2()
		{
			CheckCond51AllBase2(true);
			CheckCond51AllBase2(false);
		}
		private static void CheckCond51AllBase2(bool isAndCheck)
		{ 
			List<string> codeList = CsvControll.GetCodeList();
			if (false) {
				codeList = new List<string>();
				int aaa = 0;
				foreach (string code in CsvControll.GetCodeList()) {
					codeList.Add(code); aaa++;
					if (aaa >= 3) break;
				}
			}

			int kouhoNum = ConfirmOrs.Length + ConfirmAnds.Length + 1;

			int[,,] benefitAll = new int[kouhoNum, condNum(), 2];
			int[,,] havePeriodAll = new int[kouhoNum, condNum(), 2];
			int[,,] trueAll = new int[kouhoNum, condNum(), 2];

			foreach (string symbol in codeList) {
				HashSet<string>[] beforeNotAndKouho = new HashSet<string>[ConfirmAnds.Length + 1];
				for (int i = 0; i < ConfirmAnds.Length; i++) {
					(int pIdx, int ratioIdx, int diffDayIdx, bool isT) = SplitCondIdx(ConfirmAnds[i]);
					foreach (string[] cond51 in CsvControll.GetCond51All(symbol, diffDayIdx, ratioIdx)) {
						if ((cond51[pIdx + 1] == "1") != isT) {
							for (int i2 = 0; i2 < ConfirmAnds.Length + 1; i2++) {
								if (i == i2) continue; // 一致するもの(はぶくやつ)はスキップ
								if (beforeNotAndKouho[i2] == null) beforeNotAndKouho[i2] = new HashSet<string>();
								beforeNotAndKouho[i2].Add(cond51[0]);
							}
						}
					}
				}

				HashSet<string>[] beforeOrKouho = new HashSet<string>[ConfirmOrs.Length + 1];
				for (int i = 0; i < ConfirmOrs.Length; i++) {
					(int pIdx, int ratioIdx, int diffDayIdx, bool isT) = SplitCondIdx(ConfirmOrs[i]);
					foreach (string[] cond51 in CsvControll.GetCond51All(symbol, diffDayIdx, ratioIdx)) {
						if ((cond51[pIdx + 1] == "1") == isT) {
							for (int i2 = 0; i2 < ConfirmOrs.Length + 1; i2++) {
								if (i == i2) continue; // 一致するもの(はぶくやつ)はスキップ
								if (beforeOrKouho[i2] == null) beforeOrKouho[i2] = new HashSet<string>();
								beforeOrKouho[i2].Add(cond51[0]);
							}
						}
					}
				}

				Dictionary<string, int> benefits = new Dictionary<string, int>();
				Dictionary<string, int> havePeriods = new Dictionary<string, int>();
				foreach (string[] benefitInfo in CsvControll.GetBenefitAll(symbol)) {
					benefits[benefitInfo[0]] = Int32.Parse(benefitInfo[1]);
					havePeriods[benefitInfo[0]] = Int32.Parse(benefitInfo[2]);
				}

				for (int diffDayIdx = 0; diffDayIdx < diffDayList.Length; diffDayIdx++) {
					for (int ratioIdx = 0; ratioIdx < ratioList.Length; ratioIdx++) {
						List<string[]> cond51All = CsvControll.GetCond51All(symbol, diffDayIdx, ratioIdx);
						for (int pIdx = 0; pIdx < periodCntList.GetLength(0); pIdx++) {
							foreach (bool isT in new bool[2] { true, false }) {
								int condIdx = GetCondIdx(pIdx, ratioIdx, diffDayIdx, isT);
								if (Array.IndexOf(NotCond, condIdx) >= 0) continue;
								int[] nowHaves = new int[kouhoNum];
								for (int c = 0; c < cond51All.Count; c++) {
									string[] cond51 = cond51All[c];

									if (!benefits.ContainsKey(cond51[0])) continue;

									//if (beforeNotAnd[symbol].Contains(cond51[0])) continue;
									if (isAndCheck && (cond51[pIdx + 1] == "1") != isT) continue;
									bool isOrCheck = !isAndCheck && (cond51[pIdx + 1] == "1") == isT;

									//if (!isOrCheck) continue;
									for (int i = 0; i < kouhoNum; i++) {
										int andIdx = i >= ConfirmAnds.Length ? ConfirmAnds.Length : i;
										int orIdx = i < ConfirmAnds.Length ? ConfirmOrs.Length : i - ConfirmAnds.Length;
										HashSet<string> beAnd = beforeNotAndKouho[andIdx] ?? new HashSet<string>();
										HashSet<string> beOr = beforeOrKouho[orIdx] ?? new HashSet<string>();
										if (beAnd.Contains(cond51[0]) || (!beOr.Contains(cond51[0]) && !isOrCheck)) continue;

										benefitAll[i, condIdx, 0] += benefits[cond51[0]];
										havePeriodAll[i, condIdx, 0] += havePeriods[cond51[0]];
										trueAll[i, condIdx, 0]++;

										if (nowHaves[i] > c) continue;
										benefitAll[i, condIdx, 1] += benefits[cond51[0]];
										havePeriodAll[i, condIdx, 1] += havePeriods[cond51[0]];
										trueAll[i, condIdx, 1]++;
										nowHaves[i] = c + havePeriods[cond51[0]] + 1;
									}
								}
							}
						}
					}
				}

				//Common.DebugInfo("CheckCond51AllBase2Symbol", symbol, DateTime.Now);
			}

			// 並び変えるか
			for (int i = 0; i < kouhoNum; i++) {
				Dictionary<int, double> noBenefit = new Dictionary<int, double>();
				Dictionary<int, double> skipBenefit = new Dictionary<int, double>();
				Dictionary<int, double> noPeriod = new Dictionary<int, double>();
				Dictionary<int, double> skipPeriod = new Dictionary<int, double>();
				Dictionary<int, double> scores = new Dictionary<int, double>();
				Dictionary<int, double> scores2 = new Dictionary<int, double>();
				Dictionary<int, double> scores3 = new Dictionary<int, double>();
				Dictionary<int, double> scores4 = new Dictionary<int, double>();
				for (int j = 0; j < condNum(); j++) {
					if (trueAll[i, j, 1] == 0) continue;
					noBenefit[j] = Common.Round((double)benefitAll[i, j, 0] / (double)trueAll[i, j, 0], 4);
					noPeriod[j] = Common.Round((double)havePeriodAll[i, j, 0] / (double)trueAll[i, j, 0], 4);
					skipBenefit[j] = Common.Round((double)benefitAll[i, j, 1] / (double)trueAll[i, j, 1], 4);
					skipPeriod[j] = Common.Round((double)havePeriodAll[i, j, 1] / (double)trueAll[i, j, 1], 4);

					scores[j] = Common.Round(Math.Pow(trueAll[i, j, 1], 0.75) * skipBenefit[j] / Math.Pow(skipPeriod[j], PeriodPow)
						+ Math.Pow(trueAll[i, j, 0], 0.75) * noBenefit[j] / Math.Pow(noPeriod[j], PeriodPow) / NoSkipRatio, 3);
					scores2[j] = Common.Round(Math.Pow(trueAll[i, j, 1], 0.8) * skipBenefit[j] / Math.Pow(skipPeriod[j], PeriodPow)
						+ Math.Pow(trueAll[i, j, 0], 0.8) * noBenefit[j] / Math.Pow(noPeriod[j], PeriodPow) / NoSkipRatio, 3);
					scores3[j] = Common.Round(Math.Pow(trueAll[i, j, 1], 0.85) * skipBenefit[j] / Math.Pow(skipPeriod[j], PeriodPow)
						+ Math.Pow(trueAll[i, j, 0], 0.85) * noBenefit[j] / Math.Pow(noPeriod[j], PeriodPow) / NoSkipRatio, 3);
					scores4[j] = Common.Round(Math.Pow(trueAll[i, j, 1], 0.9) * skipBenefit[j] / Math.Pow(skipPeriod[j], PeriodPow)
						+ Math.Pow(trueAll[i, j, 0], 0.9) * noBenefit[j] / Math.Pow(noPeriod[j], PeriodPow) / NoSkipRatio, 3);

				}

				int andIdx = i >= ConfirmAnds.Length ? ConfirmAnds.Length : i;
				int orIdx = i < ConfirmAnds.Length ? ConfirmOrs.Length : i - ConfirmAnds.Length;
				for (int r = 2; r <= 2; r++) {
					string result = ""; string result2 = ""; int max = 3;
					foreach (KeyValuePair<int, double> b in (r == 0 ? scores : r == 1 ? scores2 : r == 2 ? scores3 : scores4).OrderByDescending(c => trueAll[i, c.Key, 1] > 50000 ? c.Value : -999)) {
						if (max > 0) {
							result += "\nCond:" + b.Key + ", Score:" + b.Value + ", sT:" + trueAll[i, b.Key, 1] + ", sP:" + skipPeriod[b.Key] + ", sB:" + skipBenefit[b.Key]
								+ ", nT:" + trueAll[i, b.Key, 0] + ", nP:" + noPeriod[b.Key] + ", nB:" + noBenefit[b.Key];
							result2 += b.Key + ",";
						}
						max--;
					}
					Common.DebugInfo("LowScoreRank" + r, andIdx, orIdx, result, result2);
				}

			}

		}








		private static int GetCondIdx(int pIdx, int ratioIdx, int diffDayIdx, bool isT)
		{
			return pIdx * ratioList.Length * diffDayList.Length * 2 + ratioIdx * diffDayList.Length * 2 + diffDayIdx * 2 + (isT ? 1 : 0);
		}
		private static (int, int, int, bool) SplitCondIdx(int condIdx)
		{
			int isTIdx = condIdx % 2;
			int diffDayIdx = (condIdx % (diffDayList.Length * 2) - isTIdx) / 2;
			int ratioIdx = (condIdx % (ratioList.Length * diffDayList.Length * 2) - diffDayIdx * 2 - isTIdx) / (diffDayList.Length * 2);
			int pIdx = (condIdx - ratioIdx * diffDayList.Length * 2 - diffDayIdx * 2 - isTIdx) / (ratioList.Length * diffDayList.Length * 2);
			return (pIdx, ratioIdx, diffDayIdx, isTIdx == 1);
		}
		private static int condNum()
		{
			return periodCntList.GetLength(0) * ratioList.Length * diffDayList.Length * 2;
		}

		// ささっと全体のスコアを調べる
		public static void DebugCheckCond51Score()
		{
			bool isOldCheck = false;

			int[] confirmAnds = isOldCheck ? OldAnd51List : ConfirmAnds;
			int[] confirmOrs = isOldCheck ? OldOr51List : ConfirmOrs;

			for (int i = confirmOrs.Length - 1; i >= 0; i--) {
				DebugCheckCond51ScoreBase(confirmAnds, confirmOrs, -1, i);
			}
			for (int i = confirmAnds.Length - 1; i >= 0; i--) {
				DebugCheckCond51ScoreBase(confirmAnds, confirmOrs, i, -1);
			}
		}
		private static void DebugCheckCond51ScoreBase(int[] confirmAnds, int[] confirmOrs, int andSkip, int orSkip)
		{
			DateTime startDate = DateTime.Parse("2024/06/10");
			DateTime endDate = DateTime.Parse("2024/09/10");
			bool isAllScore = false; // Andチェック・Orチェックを無視する
			bool isOrOkForce = confirmOrs.Length == 0; // orチェックを強制でOKにしておく
			List<string> codeList = CsvControll.GetCodeList();
			if (IsPro500Only) codeList = codeList.FindAll(c => Array.IndexOf(OldPro500, Int32.Parse(c)) >= 0);

			Dictionary<string, HashSet<string>> beforeNotAnd = new Dictionary<string, HashSet<string>>();
			Dictionary<string, HashSet<string>> beforeOr = new Dictionary<string, HashSet<string>>();
			foreach (string symbol in codeList) {
				beforeNotAnd[symbol] = new HashSet<string>();
				for (int i = 0; i < confirmAnds.Length; i++) {
					if (andSkip == i) continue;
					int condIdx = confirmAnds[i];
					(int pIdx, int ratioIdx, int diffDayIdx, bool isT) = SplitCondIdx(condIdx);
					foreach (string[] cond51 in CsvControll.GetCond51All(symbol, diffDayIdx, ratioIdx)) {
						if ((cond51[pIdx + 1] == "1") != isT) beforeNotAnd[symbol].Add(cond51[0]);
					}
				}
				beforeOr[symbol] = new HashSet<string>();
				for (int i = 0; i < confirmOrs.Length; i++) {
					if (orSkip == i) continue;
					int condIdx = confirmOrs[i];
					(int pIdx, int ratioIdx, int diffDayIdx, bool isT) = SplitCondIdx(condIdx);
					foreach (string[] cond51 in CsvControll.GetCond51All(symbol, diffDayIdx, ratioIdx)) {
						if (beforeNotAnd[symbol].Contains(cond51[0])) continue;
						if ((cond51[pIdx + 1] == "1") == isT) beforeOr[symbol].Add(cond51[0]);
					}
				}
			}


			int skipBenefit = 0; int skipPeriod = 0; int skipTrue = 0;
			int noBenefit = 0; int noPeriod = 0; int noTrue = 0;
			int numAll = 0;
			foreach (string symbol in codeList) {
				Dictionary<string, int> benefits = new Dictionary<string, int>();
				Dictionary<string, int> havePeriods = new Dictionary<string, int>();
				foreach (string[] benefitInfo in CsvControll.GetBenefitAll(symbol)) {
					benefits[benefitInfo[0]] = Int32.Parse(benefitInfo[1]);
					havePeriods[benefitInfo[0]] = Int32.Parse(benefitInfo[2]);
				}
				int nowHaves = 0;
				(int pIdx, int ratioIdx, int diffDayIdx, bool isT) = SplitCondIdx(AllTrueCondIdx);
				List<string[]> list = CsvControll.GetCond51All(symbol, diffDayIdx, ratioIdx);
				for (int i = 0; i < list.Count; i++) {
					string[] cond51 = list[i];
					if (IsPro500Only && (Common.NewD2(DateTime.Parse(cond51[0]), startDate) || Common.NewD2(endDate, DateTime.Parse(cond51[0])))) continue;
					if (!benefits.ContainsKey(cond51[0])) continue;

					numAll++;
					if (!isAllScore) {
						if (beforeNotAnd[symbol].Contains(cond51[0])) continue;
						if (!isOrOkForce && !beforeOr[symbol].Contains(cond51[0])) continue;
					}


					noBenefit += benefits[cond51[0]];
					noPeriod += havePeriods[cond51[0]];
					noTrue++;

					if (nowHaves > i) continue;
					skipBenefit += benefits[cond51[0]];
					skipPeriod += havePeriods[cond51[0]];
					skipTrue++;
					nowHaves = i + havePeriods[cond51[0]] + 1;
				}
			}

			double skipB = (double)skipBenefit / skipTrue;
			double skipP = (double)skipPeriod / skipTrue;
			double noB = (double)noBenefit / noTrue;
			double noP = (double)noPeriod / noTrue;
			double score = Common.Round(Math.Pow(skipTrue, 0.85) * skipB / Math.Pow(skipP, PeriodPow)
				+ Math.Pow(noTrue, 0.85) * noB / Math.Pow(noP, PeriodPow) / NoSkipRatio, 3);

			int idx = andSkip == -1 ? confirmOrs[orSkip] : confirmAnds[andSkip];
			Common.DebugInfo("DebugCheckCond51", idx, andSkip, orSkip, score, skipTrue, Common.Round(skipB, 2), Common.Round(skipP, 2), noTrue, Common.Round(noB, 2), Common.Round(noP, 2));
		}









		private const int Limit = 1600;
		// 設定したconditionsにて、全コードが(120日目～2024/8/30)の期間にてそれぞれ購入可能かどうかを調べて保存
		public static void SaveBuyInfo()
		{
			List<string[]> conditions = CsvControll.GetConditions(); // 昔決めた51条件のやつ
			List<DateTime> dateList = CsvControll.GetDateList();
			List<string> codeList = CsvControll.GetCodeList();
			string lastDate = "2025/03/05";

			int limit = 0;
			foreach (string code in codeList) {
				limit++;
				if (!(limit > Limit && limit <= Limit + 1000)) continue; // 仮

				List<string[]> saveData = new List<string[]>();
				List<string[]> codeInfo = CsvControll.GetCodeInfo(code);
				string date120 = codeInfo[120][0];

				if (IsAllCheck) {
				} else {
					if (!Common.Pro500(code)) continue;
					date120 = "2024/06/17";
					lastDate = "2024/09/10";
				}

				bool isStart = false;
				foreach (DateTime date in dateList) {
					// 後ろは2024/9/1で固定かな 前は最古(codeInfo[0])から120日後まで => condInfo[120]～2024/08/30
					if (date120 == date.ToString(CsvControll.DFORM)) isStart = true;
					if (!isStart) continue;
					if (lastDate == date.ToString(CsvControll.DFORM)) break;

					// 対象外は-1?いやデータなしかな
					string isCond = IsCondOk(date, codeInfo, conditions) ? "1" : "0";
					saveData.Add(new string[2] { date.ToString(CsvControll.DFORM), isCond });
				}
				CsvControll.SaveBuyInfo(code, saveData);
			}
		}


		// 指定コード・日付が条件を完全に満たすか
		public static bool IsCondOk(DateTime date, List<string[]> codeInfo, List<string[]> conditions)
		{
			bool isOrOk = false;
			bool isAndOk = true;
			foreach (string[] cond in conditions) {
				bool isAnd = cond[0] == "1"; // and条件かor条件か
				if (!isAnd && isOrOk) continue; // or条件はこれ以上調べなくてよい
												// cond[1]は51
				bool isCond = Is51Cond(codeInfo, date, Int32.Parse(cond[2]), Int32.Parse(cond[3]), Int32.Parse(cond[4]), Double.Parse(cond[6]));
				bool isTrue = (cond[5] == "1") == isCond; // 満たす満たさない
				if (isAnd && !isTrue) {
					isAndOk = false;
					break;
				}
				if (!isAnd && isTrue) isOrOk = true;
			}

			return isOrOk && isAndOk;
		}

		public static bool Is51Cond(List<string[]> codeInfo, DateTime date, int period, int diffDay, int cnt, double ratio)
		{
			// 51:period日間でdiffDay日前との比率がratio以上となるのがcnt件以上
			// 53:c1日間でc3日前との比率の平均がa1以上
			// 61:c1日間でc3日前とc3日前から2c3日前の比率の変化回数がd1回以上
			// cは有効日付のみカウント→是正したほうがよいな

			// dateは購入日とする
			// dateからc1日間分遡ってループ処理していき、各日とそのc3日前の比率がa1以上かチェックし、それがd1件以上あるか

			// 日付がdateの直前まである必要がある date以上がなく、-1がなければアウト
			DateTime lastInfo = DateTime.Parse(codeInfo[codeInfo.Count - 1][0]);
			if (!Common.NewD2(date, lastInfo)) {
				if (!Common.SameD(Common.GetDateByIdx(Common.GetDateIdx(lastInfo) + 1), date)) {
					CsvControll.ErrorLog("Is51Cond", date.ToString(), lastInfo.ToString(), "");
					return false;
				}
			}


			// 日付は古い→新しいの順、単純にインデックスがcの値と考える
			for (int i = codeInfo.Count - 1; i >= 0; i--) {
				// 日付,始値,高値,安値,終値
				string[] info = codeInfo[i];
				// 指定日<=計測日　ならスキップ
				if (Common.NewD2(date, DateTime.Parse(info[0]))) continue;
				// データが足りないのでアウト
				if (i - diffDay < 0) Common.DebugInfo("ERROR1", info[0], date.ToString(CsvControll.DFORM), i, diffDay);
				if (Double.Parse(codeInfo[i - diffDay][4]) * ratio <= Double.Parse(info[4])) cnt--;
				if (cnt <= 0) return true;
				period--;
				if (period <= 0) return false;
			}

			return false;
		}



		// 利益平均と所持期間合計など計算
		public static void BenefitSum()
		{
			Dictionary<DateTime, int> japanScores = GetTrueJScoreList();
			List<string> codeList = CsvControll.GetCodeList();
			for (int nowIdx = 0; nowIdx < 10; nowIdx += 10) {
				for (int beforeIdx = 0; beforeIdx < 10; beforeIdx += 10) {
					double havePeriodRatio = 0; // 所持期間比率合計 合計10とかなら常時10銘柄を所持していられるイメージ
					double benefitSum = 0; // 利益合計
					double havePeriodSum = 0; // 所持期間合計

					foreach (string code in codeList) {
						if (!IsAllCheck && !Common.Pro500(code)) continue;

						double[] res = Benefit(code, japanScores, nowIdx, beforeIdx);
						havePeriodRatio += res[1] / res[2];
						benefitSum += res[0];
						havePeriodSum += res[1];
					}
					// 1コード1日あたりの利益平均(とりあえず222を基準とする)
					int ratio = (int)(benefitSum * 1000000 / havePeriodSum);
					//if (ratio > 70) {
					// ni:17- , bi:2-6
					Common.DebugInfo("BenefitSum", nowIdx, beforeIdx, ratio, havePeriodRatio, benefitSum, havePeriodSum);
					//}
				}
			}
		}

		// 特定コードについて 利益合計・所持期間/測定期間 を調べる
		private static double[] Benefit(string code, Dictionary<DateTime, int> japanScores, int nowIdx, int beforeIdx)
		{
			List<string[]> buyInfo = CsvControll.GetBuyInfo(code); // 購入対象日か否か
			List<string[]> codeInfo = CsvControll.GetCodeInfo(code);

			double benefitSum = 0; // 利益合計
			int havePeriodSum = 0; // 所持期間合計

			int havePeriod = 0; // 所持期間
			int firstBuy = -1;
			double buyPrice = 0;
			int buyJScore = 0;
			DateTime buyDate = DateTime.Today;

			for (int i = 0; i < codeInfo.Count - 1; i++) {
				string[] info = codeInfo[i];
				if (info.Length == 0 || buyInfo.Count == 0) Common.DebugInfo("BenefitERROR", code, i, info.Length, buyInfo.Count);
				// その日付の日経平均スコアは必須 まあ基本は大体あるはず
				DateTime date = DateTime.Parse(info[0]);
				if (!japanScores.ContainsKey(date) || !japanScores.ContainsKey(DateTime.Parse(codeInfo[i + 1][0]))) continue;
				// buyinfoが存在する日付帯になったら開始 それまではcontinue
				if (info[0] == buyInfo[0][0]) firstBuy = i;
				if (firstBuy == -1) continue;
				if (i - firstBuy >= buyInfo.Count && buyPrice == 0) break;

				// 基本同じ日付の終値が購入値
				if (buyPrice == 0) {
					if (Int32.Parse(buyInfo[i - firstBuy][1]) == 1) {
						buyPrice = Double.Parse(info[4]);
						havePeriod = 1;
						// この日の日経平均スコア
						buyJScore = 0;
						if (japanScores.ContainsKey(date)) buyJScore = japanScores[date];
						if (japanScores.ContainsKey(DateTime.Parse(codeInfo[i + 1][0])) && buyJScore < japanScores[DateTime.Parse(codeInfo[i + 1][0])]) {
							buyJScore = japanScores[DateTime.Parse(codeInfo[i + 1][0])];
						}
						// 購入時日付
						buyDate = DateTime.Parse(info[0]);
					}
					continue;
				}

				bool isHalfDay = date.Month % 3 == 0 && date.Day >= 14;

				havePeriod++;

				int ratio1 = 7; int ratio2 = 4; int ratio3 = 3; int ratio4 = 2; int ratio5 = 1;
				if (isHalfDay) { ratio1 = 4; ratio2 = 3; ratio3 = 2; ratio4 = 1; ratio5 = 0; }

				bool isSell = false;
				double benefit = 0;
				if (havePeriod <= 5 && buyPrice * (1 + 0.01 * ratio1) <= Double.Parse(info[2])) {
					// 高値が購入値の1.04倍以上なら売却成功
					benefit = 0.01 * ratio1;
					isSell = true;
				} else if (havePeriod <= 10 && buyPrice * (1 + 0.01 * ratio2) <= Double.Parse(info[2])) {
					benefit = 0.01 * ratio2;
					isSell = true;
				} else if (havePeriod <= 20 && buyPrice * (1 + 0.01 * ratio3) <= Double.Parse(info[2])) {
					benefit = 0.01 * ratio3;
					isSell = true;
				} else if (havePeriod <= 30 && buyPrice * (1 + 0.01 * ratio4) <= Double.Parse(info[2])) {
					benefit = 0.01 * ratio4;
					isSell = true;
				} else if (buyPrice * (1 + 0.01 * ratio5) <= Double.Parse(info[2])) {
					benefit = 0.01 * ratio5;
					isSell = true;
				} else if (havePeriod >= 42) {
					// 売却失敗
					//Common.DebugInfo("FailedStartR:{0}:{1}:{2}:{3}:EndR\n", code, Double.Parse(info[4]), buyPrice, Double.Parse(info[4]) / buyPrice - 1);
					benefit = Double.Parse(info[4]) / buyPrice - 1;
					isSell = true;
				} else {
					// 損切 日経平均に応じた感じかな？模索する必要はあるな 危険度高 + 終値4％マイナスとかなら損切かしら
					// 利益最大化になるように検証かしら

					// 1:373, 2:48, 3:36, 4:103
					int jScore = 0;
					if (japanScores.ContainsKey(date)) jScore = japanScores[date];
					// 翌日分のも見て高いほうを参照
					if (japanScores.ContainsKey(DateTime.Parse(codeInfo[i + 1][0])) && jScore < japanScores[DateTime.Parse(codeInfo[i + 1][0])]) {
						jScore = japanScores[DateTime.Parse(codeInfo[i + 1][0])];
					}

					// 購入から現在までの損益(-0.01 ～ -0.30)
					//double nowBenefit = Double.Parse(info[3]) / buyPrice - 1;
					// 前日からの減少値(-0.01 ～ -0.30)
					double beforeBenefit = Double.Parse(info[3]) / Double.Parse(codeInfo[i - 1][4]) - 1;
					// 購入から現在(安値)までの損益(-0.01 ～ -0.30)
					double yasuneBenefit = Double.Parse(info[3]) / buyPrice - 1;

					double now0 = 6; double now1 = 3.5; double now2 = 3; double now3 = 2; double now4 = 0.5;
					double before0 = 3.5; double before1 = 1.5; double before2 = 1; double before3 = 0.5; double before4 = 0;
					if (isHalfDay) {
						now0 = 5; now1 = 2.5; now2 = 2; now3 = 1; now4 = 0;
						before0 = 2.5; before1 = 1; before2 = 0.5; before3 = 0; before4 = 0;
					}

					// ni:0-9=>2--8
					//double setNowBenefit = (double)3 - nowIdx;
					//double setBeforeBenefit = (double)3 - beforeIdx;
					if (jScore == 0) {
						if (yasuneBenefit <= -0.01 * now0 || beforeBenefit <= -0.01 * before0) isSell = true;
						//if (nowBenefit <= 0.01 * setNowBenefit || beforeBenefit <= 0.01 * setBeforeBenefit) isSell = true;
					} else if (jScore == 1) {
						if (yasuneBenefit <= -0.01 * now1 || beforeBenefit <= -0.01 * before1) isSell = true;
						//if (nowBenefit <= 0.01 * setNowBenefit || beforeBenefit <= 0.01 * setBeforeBenefit) isSell = true;
					} else if (jScore == 2) {
						if (yasuneBenefit <= -0.01 * now2 || beforeBenefit <= -0.01 * before2) isSell = true;
						//if (nowBenefit <= 0.01 * setNowBenefit || beforeBenefit <= 0.01 * setBeforeBenefit) isSell = true;
					} else if (jScore == 3) {
						if (yasuneBenefit <= -0.01 * now3 || beforeBenefit <= -0.01 * before3) isSell = true;
						//if (nowBenefit <= 0.01 * setNowBenefit || beforeBenefit <= 0.01 * setBeforeBenefit) isSell = true;
					} else if (jScore == 4) {
						if (yasuneBenefit <= -0.01 * now4 || beforeBenefit <= -0.01 * before4) isSell = true;
						//if (nowBenefit <= 0.01 * setNowBenefit || beforeBenefit <= 0.01 * setBeforeBenefit) isSell = true;
					}

					if (isSell) benefit = Double.Parse(info[4]) / buyPrice - 1;
				}
				if (isSell) {
					int jRatio = 5 - buyJScore; // 購入時JSCORE時によって調整
					bool isHalf = buyDate.Month % 3 == 0 && buyDate.Day >= 14;
					int dateRatio = isHalf ? 2 : 1;// 購入時期によって調整
					havePeriodSum += havePeriod * jRatio / dateRatio;
					benefitSum += benefit * jRatio / dateRatio;

					buyPrice = 0;
					havePeriod = 0;
				}
			}

			return new double[3] { benefitSum, havePeriodSum, buyInfo.Count };
		}



		private static readonly int[][] japanScore5 = new int[4][] {
			new int[] {3359,3486,4019},
			new int[] {2375,2924,4094},
			new int[] {3526,1877},
			new int[] {1767},
		};
		private static readonly int[][] japanScore4 = new int[4][] {
			new int[] {3359,3486},
			new int[] {3562,2915,2375,1396,2924,4094},
			new int[] {3526,1877,1928},
			new int[] {1767,1822},
		};
		private static readonly int[][] japanScore3 = new int[4][] {
			new int[] {3359,3486,189},
			new int[] {3501,3562,2915,2375},
			new int[] {3526,1877},
			new int[] {1767,1822},
		};
		private static readonly int[][] japanScore2 = new int[4][] {
			new int[] {3359,3486},
			new int[] {3501,3562,2915,2375},
			new int[] {3526,1877,1928},
			new int[] {1767,1822},
		};
		private static readonly int[][] japanScore1 = new int[4][] {
			new int[] {3359,3486},
			new int[] {3501,3562,1843,2915,2375},
			new int[] {3526,1928,2368,2941,1350},
			new int[] {1767,1822},
		};
		// 各日付について複数セットの条件を満たすかのチェック 厳しめのチェックから順番にやっていく
		private static Dictionary<DateTime, int> GetTrueJScoreList()
		{
			Dictionary<DateTime, int> res = new Dictionary<DateTime, int>();
			foreach (int[][] japanScoreConds in new int[5][][] { japanScore5, japanScore4, japanScore3, japanScore2, japanScore1 }) {
				Dictionary<DateTime, bool> isOrOks = new Dictionary<DateTime, bool>();
				Dictionary<DateTime, bool> isAndOks = new Dictionary<DateTime, bool>();
				for (int type = 0; type < 4; type++) {
					string isOmote = type % 2 == 0 ? "1" : "0"; //0,2はtrue, 1,3はfalse
					bool isAnd = type < 2; //0,1はAnd, 2,3はOr
					foreach (int idx in japanScoreConds[type]) {
						List<string[]> japanCond = CsvControll.GetJapanCond(idx);
						for (int i = 0; i < japanCond.Count; i++) {
							// この日付に対しての判定
							DateTime date = DateTime.Parse(japanCond[i][0]);
							if (isAnd) {
								if (japanCond[i][1] != isOmote) isAndOks[date] = false;
							} else {
								if (japanCond[i][1] == isOmote) isOrOks[date] = true; // Or条件成功
							}
						}
					}
				}

				List<string[]> japanCond2 = CsvControll.GetJapanCond(189);
				for (int i = 0; i < japanCond2.Count; i++) {
					// この日付に対しての判定
					DateTime date = DateTime.Parse(japanCond2[i][0]);
					if (!isAndOks.ContainsKey(date) && isOrOks.ContainsKey(date)) {
						if (!res.ContainsKey(date)) res[date] = 0;
						res[date]++;
					}
				}
			}

			Dictionary<DateTime, int> trueRes = new Dictionary<DateTime, int>();
			List<string[]> japanCond3 = CsvControll.GetJapanCond(189);
			for (int i = 2; i < japanCond3.Count; i++) {
				int[] jScoreRaws = new int[3];
				for (int j = 0; j < 3; j++) {
					DateTime date = DateTime.Parse(japanCond3[i - j][0]);
					jScoreRaws[j] = res.ContainsKey(date) ? res[date] : 0;
				}
				if (i == 2258 || i == 2259) jScoreRaws[0] /= 2;
				trueRes[DateTime.Parse(japanCond3[i][0])] = ConvertTrueJScore(jScoreRaws[0], jScoreRaws[1], jScoreRaws[2]);
			}
			return trueRes;
		}

		private static readonly int[][] japanScoreInfo = new int[5][] {
			// {1日前がこれ以上なら+1, 2日前がこれ以上なら+1, 1日前がこれ以下なら-1, 2日前がこれ以下なら-1}
			new int[] {3,3, -10,-10}, // 元が0 -1しない
			new int[] {3,3, 0,0}, // 元が1
			new int[] {4,3, 0,1}, // 元が2
			new int[] {5,3, 1,1}, // 元が3
			new int[] {10,10, 2,3}, // 元が4 +1しない
		};
		/** ベースJScoreを前日・前々日のスコアによってトゥルースコアに変換 */
		public static int ConvertTrueJScore(int baseJScore, int baseJScore1, int baseJScore2)
		{
			foreach (int score in new int[3] { baseJScore, baseJScore1, baseJScore2 }) {
				if (score < 0 || score > 5) CsvControll.ErrorLog("ConvertTrueJScore", baseJScore.ToString(), baseJScore1.ToString(), baseJScore2.ToString());
			}
			if (baseJScore == 5) return 4;
			int[] infos = japanScoreInfo[baseJScore];
			if (infos[0] <= baseJScore1 && infos[1] <= baseJScore2) return baseJScore + 1;
			if (infos[2] >= baseJScore1 && infos[3] >= baseJScore2) return baseJScore - 1;
			return baseJScore;
		}



		// 手順的には一日分のjapanCond4226(いや流石に必要分100くらいだけでええか)通りを追記保存=>それを元に指定idx達でスコア0-4を取得(これも保存？)
		// 指定日の前日までのcodeInfoはあらかじめ作っておく
		// 当日の場合はあらかじめ各数値でシミュレーションを行い、どの値であればスコアがいくつになるか逆算値をセットしておく
		public static void SaveJapanBaseScoreOneDay(DateTime setDate)
		{
			Dictionary<int, bool> updateIdxs = new Dictionary<int, bool>();
			foreach (int[][] japanScoreConds in new int[5][][] { japanScore5, japanScore4, japanScore3, japanScore2, japanScore1 }) {
				for (int type = 0; type < 4; type++) {
					foreach (int idx in japanScoreConds[type]) updateIdxs[idx] = true;
				}
			}
			// ここにはあらかじめ前日データまでいれとかねばならない
			List<string[]> japanInfo = CsvControll.GetJapanInfo();
			// 指定idx・dateの更新　JapanCondに追記する
			foreach (KeyValuePair<int, bool> pair in updateIdxs) SaveJapanCondOne(japanInfo, setDate, pair.Key);

			int score = 0;
			foreach (int[][] japanScoreConds in new int[5][][] { japanScore5, japanScore4, japanScore3, japanScore2, japanScore1 }) {
				bool isOrOk = false;
				bool isAndOk = true;
				for (int type = 0; type < 4; type++) {
					string isOmote = type % 2 == 0 ? "1" : "0"; //0,2はtrue, 1,3はfalse
					bool isAnd = type < 2; //0,1はAnd, 2,3はOr
					foreach (int idx in japanScoreConds[type]) {
						List<string[]> japanCond = CsvControll.GetJapanCond(idx);
						bool isExistData = false;
						for (int i = japanCond.Count - 1; i >= 0; i--) {
							// この日付に対しての判定
							if (Common.SameD(setDate, DateTime.Parse(japanCond[i][0]))) {
								if (isAnd) {
									if (japanCond[i][1] != isOmote) isAndOk = false;
								} else {
									if (japanCond[i][1] == isOmote) isOrOk = true; // Or条件成功
								}
								isExistData = true;
								break;
							}
						}
						if (!isExistData) {
							CsvControll.ErrorLog("SaveJapanBaseScoreOneDay", setDate.ToString(), "NoExist", "");
							return;
						}
					}
				}

				if (isAndOk && isOrOk) score++;
			}

			// date,スコアをセーブする　存在したらエラー？
			if (CsvControll.GetBaseJScore(setDate) != -99) {
				CsvControll.ErrorLog("SaveJapanScoreOneDay", setDate.ToString(), "DataExist", score.ToString());
				return;
			}

			CsvControll.SaveBaseJScores(new List<string[]>() { new string[2] { setDate.ToString(CsvControll.DFORM), score.ToString() } }, true);
		}

		// 指定した日付(基本最新日付)の日経平均について、設定した各条件(かぶりなし)を満たしているかどうかを判定してJapanCondに追記保存
		private static void SaveJapanCondOne(List<string[]> japanInfo, DateTime date, int idx)
		{
			// 保存前に当日データが既に存在してないかチェックかな
			foreach (string[] info in CsvControll.GetJapanCond(idx)) {
				if (Common.SameD(date, DateTime.Parse(info[0]))) {
					Common.DebugInfo("sjcEr3", idx, info[0]);
					return;
				}
			}

			int p = idx % periodCntList.GetLength(0);
			int diffDay = diffDayList[idx / (periodCntList.GetLength(0) * ratioList.Length)];
			double ratio = ratioList[(idx / periodCntList.GetLength(0)) % ratioList.Length];
			List<string[]> datas = new List<string[]>() {new string[2] {
				date.ToString(CsvControll.DFORM),
				Is51Cond(japanInfo, date, periodCntList[p, 0], diffDay, periodCntList[p, 1], ratio) ? "1" : "0",
			}};
			CsvControll.SaveJapanCond(idx, datas, true);
		}

		// 指定日前日データを使って指定日のスコア作成後、指定日の偽データ入れて指定日翌日の暫定スコアを200通り作成
		public static void SaveTrueJScoreIkichis(DateTime setDate)
		{
			List<string[]> japanInfo = CsvControll.GetJapanInfo();

			int lastEnd = (int)Double.Parse(japanInfo[japanInfo.Count - 1][4]);

			bool isExist = false;
			int japanInfoIdx = japanInfo.Count;
			for (int i = 0; i < japanInfo.Count; i++) {
				string[] info = japanInfo[i];
				if (Common.SameD(setDate, DateTime.Parse(info[0]))) {
					isExist = true;
					lastEnd = (int)Double.Parse(info[4]);
					japanInfoIdx = i;
					break;
				}
			}
			if (!isExist) {
				string[] last = japanInfo[japanInfo.Count - 1];
				// 最新の日付に翌日分のを暫定でいれる(これを200通りで変更させる)
				japanInfo.Add(new string[] { setDate.ToString(CsvControll.DFORM), last[1], last[2], last[3], last[4] });
			}


			DateTime nextDate = Common.GetDateByIdx(Common.GetDateIdx(setDate) + 1);

			// 直前に作ったやつとその前日分
			int baseJScore1 = CsvControll.GetBaseJScore(setDate);
			int baseJScore2 = CsvControll.GetBaseJScore(Common.GetDateByIdx(Common.GetDateIdx(setDate) - 1));

			List<string[]> scoreIkichis = new List<string[]>();
			for (int s = 0; s < 4000; s += 20) {
				//for (int s = 1100; s < 1500; s += 1) {
				// 200通りの値段でシミュレーション
				japanInfo[japanInfoIdx][4] = (lastEnd + s - 2000).ToString();

				int baseJScore = 0;
				int debug = 0;
				foreach (int[][] japanScoreConds in new int[5][][] { japanScore5, japanScore4, japanScore3, japanScore2, japanScore1 }) {
					bool isOrOk = false;
					bool isAndOk = true;
					for (int type = 0; type < 4; type++) {
						bool isOmote = type % 2 == 0; //0,2はtrue, 1,3はfalse
						bool isAnd = type < 2; //0,1はAnd, 2,3はOr
						foreach (int idx in japanScoreConds[type]) {
							int p = idx % periodCntList.GetLength(0);
							int diffDay = diffDayList[idx / (periodCntList.GetLength(0) * ratioList.Length)];
							double ratio = ratioList[(idx / periodCntList.GetLength(0)) % ratioList.Length];
							bool idCond = Is51Cond(japanInfo, nextDate, periodCntList[p, 0], diffDay, periodCntList[p, 1], ratio);
							if (isAnd) {
								if (idCond != isOmote) {
									isAndOk = false;
									//Common.DebugInfo("isAndOkFalse:{0}:{1}:{2}: {3},{4},{5},{6},{7} :EndR\n", s, debug, idx, nextDate, periodCntList[p, 0], diffDay, periodCntList[p, 1], ratio);
								}
							} else {
								if (idCond == isOmote) {
									isOrOk = true; // Or条件成功
												   //Common.DebugInfo("isOrOkTrue:{0}:{1}:{2}: {3},{4},{5},{6},{7} :EndR\n", s, debug, idx, nextDate, periodCntList[p, 0], diffDay, periodCntList[p, 1], ratio);
								}
							}
						}
					}

					if (isAndOk && isOrOk) baseJScore++;

					debug++;
					//if (isAndOk) Common.DebugInfo("baseJScore:{0}:{1}:{2}:EndR\n", s, debug, baseJScore);
					//if (isOrOk) Common.DebugInfo("baseJScore2:{0}:{1}:{2}:EndR\n", s, debug, baseJScore);
				}

				// 生スコア0-5を前日に0-4にする
				int trueScore = ConvertTrueJScore(baseJScore, baseJScore1, baseJScore2);
				// 翌日仮スコアを保存(値段,日経平均スコア)
				scoreIkichis.Add(new string[2] { (lastEnd + s - 2000).ToString(), trueScore.ToString() });
			}

			CsvControll.SaveTrueJScoreIkichis(scoreIkichis);
		}


		///////////////////////////////////////////
		// 以下日経平均調査用 もういらんかも？
		///////////////////////////////////////////

		// 2015-2024の各日付 × 4256通りのconditionについて全部の結果を保存する
		public static void SaveJapanCond()
		{
			List<string[]> japanInfo = CsvControll.GetJapanInfo();

			Dictionary<int, bool> needIdxs = new Dictionary<int, bool>();
			foreach (int[][] japanScoreConds in new int[5][][] { japanScore5, japanScore4, japanScore3, japanScore2, japanScore1 }) {
				for (int type = 0; type < 4; type++) {
					foreach (int needIdx in japanScoreConds[type]) needIdxs[needIdx] = true;
				}
			}

			int idx = 0;
			foreach (int diffDay in diffDayList) {
				foreach (double ratio in ratioList) {
					for (int p = 0; p < 38; p++) {
						// 特定idx以外スキップ
						if (true && !needIdxs.ContainsKey(idx)) {
							idx++;
							continue;
						}

						List<string[]> datas = new List<string[]>();
						for (int i = 120; i < japanInfo.Count - JScoreDiff; i++) {
							DateTime date = DateTime.Parse(japanInfo[i][0]);
							datas.Add(new string[2] {
								date.ToString(CsvControll.DFORM),
								Is51Cond(japanInfo, date, periodCntList[p, 0], diffDay, periodCntList[p, 1], ratio) ? "1" : "0",
							});
						}
						CsvControll.SaveJapanCond(idx, datas);
						idx++;
					}
				}
			}
		}

		private const double DRate = 0.03;
		private const int JScoreDiff = 6; // 6日後との差分を考える
		private static void JapanCheck()
		{
			// 日経平均について、各日付ごとに二日後に4％減ってれば1,8%なら2,それ以外は0とする
			List<string[]> japanInfo = new List<string[]>();
			foreach (string[] info in CsvControll.GetJapanInfo()) japanInfo.Add(new string[4] { info[0], info[4], "1", "0" });

			// デバッグ用チェック
			int[] trueCnt = new int[4];
			for (int i = 120; i < japanInfo.Count - JScoreDiff; i++) {
				double price = Double.Parse(japanInfo[i][1]);
				double price2Af = Double.Parse(japanInfo[i + JScoreDiff][1]);
				int point = 0;
				if (price * (1 - DRate) >= price2Af) point++;
				if (price * (1 - DRate * 1.6) >= price2Af) point++;
				if (price * (1 - DRate * 2.2) >= price2Af) point++;
				trueCnt[point]++;
			}
			Common.DebugInfo("JapanCheck",
				japanInfo.Count, japanInfo.Count - 120 - JScoreDiff, trueCnt[0], trueCnt[1], trueCnt[2], trueCnt[3],
				japanInfo.Count - 120 - JScoreDiff - trueCnt[0] - trueCnt[1] - trueCnt[2] - trueCnt[3]
			);

			// これらで全日付のand状況or状況を記録しておく
			// andを全て満たせてないものはfalse確定で終了 orを一個でも満たしているものはorは確定でOK
			// 検証側はandの場合は満たしてないもの全て強制でfalseに、orの場合はor条件満たしていないものについてtrueであればtrue
			/*
				BaseOScore:(0_3):161 : 2.25465838509317 : (112:3:33:13):EndR
				new int[] {189,4019,3453 },
				new int[] {4170,1869,2446,4100,2397,1304},
				new int[] {4027 ,2972},
				new int[] { 216,1760,1256},

				BaseOScore:(0_3):130 : 2.48461538461538 : (87:3:28:12):EndR
				new int[] {189,4019,3453 },
				new int[] {4170,1869,2446,4100,2397,1304},
				new int[] {4027 ,2972},
				new int[] { 216,1760},

				BaseOScore:0:3:226:1.79646017699115:166:6:41:13:EndR
				new int[] {189,4019,3453 },
				new int[] {797,2969,4170,3508,1869,2446,4100,2397},
				new int[] {4027 ,2972},
				new int[] { 216,1760,1256},

				BaseOScore:(0_3):472 : 1.22669491525424 : (369:24:63:16):End
				new int[] {189,4019,3453,3487 },
				new int[] {3032 ,1869,2446,2397,4095,2994},
				new int[] {2972,779,3457},
				new int[] { 2861,2362,3921},
			 */

			/*
				BaseOScore:(0_3):90 : 2.8 : (52:12:15:11):EndR
				new int[] {3404,1306,4018,233},
				new int[] {235,4028,2915,3510,4014,2445,1291,2357},
				new int[] {1929,3970},
				new int[] {2818,1296,1832},

				BaseOScore:(0_3):203 : 2.00492610837438 : (148:17:18:20):EndR
				new int[] {3404,1306,3450,4018},
				new int[] {2915,2950,2924,4094,3468,1884},
				new int[] {1929,2907,3526,3475},
				new int[] {1296,1832,1785},

				BaseOScore:(0_3):295 : 1.67118644067797 : (222:23:28:22):EndR
				new int[] {3404,1306,3450,4018},
				new int[] {4028,253,2915,3510,2950,2452,2924,4094},
				new int[] {1929,1878,2907,3526,3475},
				new int[] {1296,1832,1785},
				
				BaseOScore:(0_3):458 : 1.30786026200873 : (359:39:34:26):EndR
				new int[] {3404,1306,3450,3972},
				new int[] {235,4028,253,3562,2915,3510,3469,2452,2924,2930},
				new int[] {1929,2907,3526,3475,3995,1317},
				new int[] {1832,1785,3400,3932},
			 */

			/*
				BaseOScore:(0_3):127 : 5.06299212598425 : (60:13:18:36):EndR
				new int[] {3359,3486,4019},
				new int[] {2375,2924,4094},
				new int[] {3526,1877},
				new int[] {1767},
				/////////////////////////////////////////////////////////////////////
				BaseOScore:(0_3):241 : 3.33195020746888 : (146:28:23:44):EndR
				new int[] {3359,3486},
				new int[] {3562,2915,2375,1396,2924,4094},
				new int[] {3526,1877,1928},
				new int[] {1767,1822},
				/////////////////////////////////////////////////////////////////////
				BaseOScore:(0_3):316 : 2.67721518987342 : (204:41:26:45):EndR
				new int[] {3359,3486,189},
				new int[] {3501,3562,2915,2375},
				new int[] {3526,1877},
				new int[] {1767,1822},
				/////////////////////////////////////////////////////////////////////
				BaseOScore:(0_3):419 : 2.25536992840095 : (288:50:32:49):EndR
				new int[] {3359,3486},
				new int[] {3501,3562,2915,2375},
				new int[] {3526,1877,1928},
				new int[] {1767,1822},
				/////////////////////////////////////////////////////////////////////
				BaseOScore:(0_3):635 : 1.74173228346457 : (469:66:46:54):EndR
				new int[] {3359,3486},
				new int[] {3501,3562,1843,2915,2375},
				new int[] {3526,1928,2368,2941,1350},
				new int[] {1767,1822},
			*/
			int[][] defaultIdxList = new int[4][] {
				new int[] {3359,3486,4019},
				new int[] {2375,2924,4094},
				new int[] {3526,1877},
				new int[] {1767},
			};

			// 事前チェック
			BeforeCheck(japanInfo, defaultIdxList);

			int idx = 0;
			foreach (int diffDay in diffDayList) {
				foreach (double ratio in ratioList) {
					for (int p = 0; p < 38; p++) {
						for (int type = 0; type < 4; type++) {
							/*
							string[] condition = new string[7] {
								isAnd, // and条件かor条件か
								"51",
								periodCntList[p,0].ToString(), // c1:1,3,6,10,20,30,50
								diffDay.ToString(), //c3:1,3,6,10,20,30,50,70
								periodCntList[p,1].ToString(), // d1:1,2,3,4,5,6 いやc1に応じる感じか
								"1", // 満たす満たさない
								ratio.ToString(), // a1: 0.65,0.75,0.8,0.85,0.9,0.95,1,1.05,1.1,1.17,1.25,1.35,1.5,1.7
							};
							conditions = new List<string[]>();
							conditions.Add(condition);
							*/

							bool isAnd = type < 2;

							// 最終値計測用
							if (idx == 0 && (type == 0 || type == 3)) {
								//int[][] scoresA = JapanLossScore(codeInfo, idx, type % 2 == 0 ? "1" : "0", isAnd);
								// td:tu:fd:fu
								//Common.DebugInfo("BaseScore:{0}:{1}:{2}:{3}:EndR\n", scoresA[0], scoresA[1], scoresA[2], scoresA[3]);
								//continue;
							}

							int[][] scores = JapanLossScore(japanInfo, idx, type % 2 == 0 ? "1" : "0", isAnd);
							if (isAnd) {
								// andスコア
								int[] fSco = scores[1];
								int sum = fSco[0] + fSco[1] + fSco[2] + fSco[3];
								double fRatio = (double)(fSco[1] + fSco[2] * 2 + fSco[3] * 4) / sum;
								//double fRatio = (double)(fSco[1] + fSco[2] * 5 + fSco[3] * 15) / sum;
								if (idx == 0 && type == 0) Common.DebugInfo("BaseAScore", idx, type, sum, fRatio, fSco[0], fSco[1], fSco[2], fSco[3]);
								if (idx != 0 && sum >= 30 && fRatio <= 0.45) {
									//Common.DebugInfo("AndScore:({0}_{1}):{2} : {3} : ({4}:{5}:{6}:{7}):EndR\n", idx, type, sum, fRatio, fSco[0], fSco[1], fSco[2], fSco[3]);
								}
							} else {
								// orスコア
								int[] tSco = scores[0];
								int sum = tSco[0] + tSco[1] + tSco[2] + tSco[3];
								double tRatio = (double)(tSco[1] + tSco[2] * 5 + tSco[3] * 15) / sum;
								if (idx == 0 && type == 3) Common.DebugInfo("BaseOScore", idx, type, sum, tRatio, tSco[0], tSco[1], tSco[2], tSco[3]);
								if (idx != 0 && sum >= 40 && tRatio > 0.45) {
									//Common.DebugInfo("OrScore:({0}_{1}):{2} : {3} : ({4}:{5}:{6}:{7}):EndR\n", idx, type, sum, tRatio, tSco[0], tSco[1], tSco[2], tSco[3]);
								}
							}
						}
						idx++;
						break;
					}
				}
			}
		}

		private static void BeforeCheck(List<string[]> codeInfo, int[][] defaultIdxList)
		{
			for (int type = 0; type < 4; type++) {
				string isOmote = type % 2 == 0 ? "1" : "0"; //0,2はtrue, 1,3はfalse
				bool isAnd = type < 2; //0,1はAnd, 2,3はOr
				foreach (int idx in defaultIdxList[type]) {
					List<string[]> japanCond = CsvControll.GetJapanCond(idx);
					for (int i = 0; i < japanCond.Count; i++) {
						if (japanCond[i][0] != codeInfo[i + 120][0]) Common.DebugInfo("BeforeCheckERROR");
						if (isAnd) {
							if (japanCond[i][1] != isOmote) codeInfo[i + 120][2] = "0"; // And条件失敗
						} else {
							if (japanCond[i][1] == isOmote) codeInfo[i + 120][3] = "1"; // Or条件成功
						}
					}
				}
			}
		}

		private static int[][] JapanLossScore(List<string[]> codeInfo, int idx, string isOmote, bool isAnd)
		{
			// andはFになっているもののうち、Uになっているものの比率が最も高いやつを選ぶ
			// orはTのうちdになっている比率が最も高いやつ

			// 引数condIdxに対する 各日付(120～-1)の結果
			List<string[]> japanCond = CsvControll.GetJapanCond(idx);
			int[] tScores = new int[4]; // 0-3
			int[] fScores = new int[4]; // 0-3
			for (int i = 0; i < japanCond.Count; i++) {
				if (codeInfo.Count <= i + 120 + JScoreDiff) continue;
				if (japanCond[i][0] != codeInfo[i + 120][0]) Common.DebugInfo("ERRORJapanLossScore");

				bool isT = japanCond[i][1] == isOmote;

				// 事前and失敗は評価対象外とする
				if (codeInfo[i + 120][2] == "0") {
					if (idx != 0) continue;
					if (idx == 0) isT = false;
				}
				// or系の場合 事前にor系を満たしていたら評価対象外
				if (!isAnd && codeInfo[i + 120][3] == "1") {
					if (idx != 0) continue;
					if (idx == 0) isT = codeInfo[i + 120][2] != "0";
				}


				double price = Double.Parse(codeInfo[i + 120][1]);
				double price2Af = Double.Parse(codeInfo[i + 120 + JScoreDiff][1]);
				int point = 0;
				if (price * (1 - DRate) >= price2Af) point++;
				if (price * (1 - DRate * 1.6) >= price2Af) point++;
				if (price * (1 - DRate * 2.2) >= price2Af) point++;


				// 最終結果用 and系の場合、事前orがtrueかつ今回trueじゃないと			
				if (true && isAnd && codeInfo[i + 120][3] == "0") continue;

				//bool isAllT = codeInfo[i + 120][2] == "1" && ((isAnd && codeInfo[i + 120][3] == "1" && isT) || (!isAnd && (codeInfo[i + 120][3] == "1" || isT)));
				if (isT) {
					tScores[point]++;
				} else {
					fScores[point]++;
				}
			}

			//Common.DebugInfo("LastSt:{0}:{1}:{2}:EndR\n", idx,tScore, fScore);
			return new int[2][] { tScores, fScores };
		}


		public static readonly int[,] periodCntList = new int[38, 2]{
			{1,1},{3,1},{3,2},{3,3},{6,1},{6,3},{6,4},{6,6},{10,1},{10,3},{10,5},{10,7},{10,10},
			{20,1},{20,3},{20,5},{20,7},{20,10},{20,15},{20,20},{30,1},{30,3},{30,6},{30,10},
			{30,15},{30,20},{30,25},{30,30},{50,1},{50,3},{50,6},
			{50,10},{50,15},{50,20},{50,25},{50,30},{50,40},{50,50},
		};
		public static readonly int[] diffDayList = new int[8] { 1, 3, 6, 10, 20, 30, 50, 70 };
		public static readonly double[] ratioList = new double[14] {
			0.65,0.75,0.8,0.85,0.9,0.95,1,1.05,1.1,1.17,1.25,1.35,1.5,1.7
		};
		//private static readonly double[] ratioList = new double[1] {
		//	1
		//};

	}
}


/*
 * 
 LowScoreRank2 , T0:7599 , T1:1 , T2:
Cond:52, Score:4666.676, sT:50407, sP:3.2243, sB:0.7763, nT:158008, nP:3.8853, nB:0.7837
Cond:6717, Score:4638.863, sT:50304, sP:3.1921, sB:0.7689, nT:158057, nP:3.8784, nB:0.7748
Cond:2998, Score:4623.63, sT:50087, sP:3.192, sB:0.7672, nT:157134, nP:3.876, nB:0.7826
Cond:24, Score:4620.346, sT:50307, sP:3.1921, sB:0.7652, nT:157422, nP:3.8754, nB:0.776
Cond:6941, Score:4618.747, sT:50036, sP:3.1913, sB:0.7689, nT:157014, nP:3.8778, nB:0.7758
Cond:6907, Score:4615.713, sT:50363, sP:3.1964, sB:0.7643, nT:158079, nP:3.8858, nB:0.7741
Cond:6681, Score:4614.158, sT:50628, sP:3.1948, sB:0.76, nT:159544, nP:3.887, nB:0.7693
Cond:6493, Score:4613.75, sT:50850, sP:3.1908, sB:0.7565, nT:159978, nP:3.8781, nB:0.7663 , T3:52,6717,2998,24,6941,6907,6681,6493, 

LowScoreRank2 , T0:5388 , T1:1 , T2:
Cond:52, Score:4641.812, sT:50777, sP:3.2357, sB:0.7708, nT:158875, nP:3.8982, nB:0.7719
Cond:7642, Score:4607.295, sT:50363, sP:3.2017, sB:0.7647, nT:158269, nP:3.8915, nB:0.7693
Cond:7880, Score:4606.841, sT:50609, sP:3.1942, sB:0.7598, nT:159320, nP:3.8826, nB:0.7655
Cond:4954, Score:4606.041, sT:50410, sP:3.2019, sB:0.7635, nT:158432, nP:3.8919, nB:0.7699
Cond:2998, Score:4604.841, sT:50467, sP:3.2037, sB:0.7629, nT:158017, nP:3.8893, nB:0.7709
Cond:3150, Score:4602.142, sT:50145, sP:3.2026, sB:0.7665, nT:157431, nP:3.8902, nB:0.7728
Cond:6717, Score:4598.98, sT:50207, sP:3.2025, sB:0.766, nT:157304, nP:3.8934, nB:0.7703
Cond:1424, Score:4597.602, sT:50035, sP:3.2036, sB:0.7688, nT:156754, nP:3.8924, nB:0.7701 , T3:52,7642,7880,4954,2998,3150,6717,1424, 
LowScoreRank2 , T0:7436 , T1:1 , T2:
Cond:7868, Score:4449.707, sT:50424, sP:3.1491, sB:0.7255, nT:158487, nP:3.7961, nB:0.7452
Cond:5182, Score:4396.225, sT:50566, sP:3.1509, sB:0.7194, nT:158305, nP:3.8038, nB:0.724
Cond:7660, Score:4386.947, sT:55163, sP:3.2691, sB:0.6767, nT:182394, nP:4.0659, nB:0.6894
Cond:3390, Score:4369.172, sT:50674, sP:3.1517, sB:0.7078, nT:158373, nP:3.7994, nB:0.7393
Cond:8090, Score:4355.75, sT:51172, sP:3.1165, sB:0.6913, nT:162916, nP:3.7885, nB:0.7297
Cond:3614, Score:4354.404, sT:53009, sP:3.1839, sB:0.6808, nT:170179, nP:3.8771, nB:0.7111
Cond:7228, Score:4343.196, sT:54946, sP:3.3386, sB:0.6814, nT:181297, nP:4.1941, nB:0.7002
Cond:5406, Score:4332.62, sT:55260, sP:3.2144, sB:0.6587, nT:181555, nP:3.9601, nB:0.6764 , T3:7868,5182,7660,3390,8090,3614,7228,5406, 
LowScoreRank2 , T0:1618 , T1:1 , T2:
Cond:1632, Score:4527.337, sT:50340, sP:3.2247, sB:0.7579, nT:155134, nP:3.8826, nB:0.7585
Cond:1025, Score:4445.711, sT:50082, sP:3.0812, sB:0.724, nT:156145, nP:3.7709, nB:0.7327
Cond:7896, Score:4416.428, sT:50380, sP:3.0455, sB:0.7145, nT:161288, nP:3.794, nB:0.6962
Cond:80, Score:4413.557, sT:52064, sP:3.1367, sB:0.7136, nT:153489, nP:3.7556, nB:0.7001
Cond:724, Score:4365.326, sT:51208, sP:3.1788, sB:0.7078, nT:161740, nP:3.8578, nB:0.7226
Cond:1921, Score:4364.455, sT:51299, sP:3.1016, sB:0.6945, nT:162901, nP:3.8426, nB:0.7193
Cond:1592, Score:4357.226, sT:52180, sP:3.0344, sB:0.674, nT:165616, nP:3.7516, nB:0.6962
Cond:686, Score:4352.031, sT:50013, sP:3.0373, sB:0.7028, nT:157780, nP:3.7539, nB:0.7095 , T3:1632,1025,7896,80,724,1921,1592,686, 
LowScoreRank2 , T0:6851 , T1:1 , T2:
Cond:7077, Score:4589.573, sT:50278, sP:3.1999, sB:0.761, nT:157693, nP:3.8727, nB:0.7717
Cond:6663, Score:4548.915, sT:51314, sP:3.2252, sB:0.7458, nT:163527, nP:3.9394, nB:0.7475
Cond:6889, Score:4543.91, sT:50479, sP:3.2099, sB:0.7538, nT:159085, nP:3.9022, nB:0.7573
Cond:6683, Score:4542.357, sT:50541, sP:3.2142, sB:0.7542, nT:158448, nP:3.9076, nB:0.7576
Cond:7896, Score:4541.998, sT:51221, sP:3.1899, sB:0.7384, nT:164192, nP:3.8939, nB:0.7453
Cond:6833, Score:4523.974, sT:52087, sP:3.1817, sB:0.7213, nT:164362, nP:3.8457, nB:0.7444
Cond:7464, Score:4510.793, sT:50432, sP:3.2026, sB:0.745, nT:160062, nP:3.8983, nB:0.7569
Cond:4972, Score:4508.474, sT:50101, sP:3.2397, sB:0.7537, nT:160004, nP:3.9722, nB:0.7685 , T3:7077,6663,6889,6683,7896,6833,7464,4972, 
LowScoreRank2 , T0:1065 , T1:1 , T2:
Cond:7896, Score:4562.664, sT:51273, sP:3.1545, sB:0.7319, nT:165404, nP:3.8708, nB:0.7542
Cond:1961, Score:4546.774, sT:51581, sP:3.2198, sB:0.7326, nT:163833, nP:3.9263, nB:0.7742
Cond:4972, Score:4542.523, sT:50208, sP:3.2018, sB:0.7482, nT:161437, nP:3.9446, nB:0.7787
Cond:7464, Score:4530.642, sT:50510, sP:3.1658, sB:0.7374, nT:161415, nP:3.8719, nB:0.7661
Cond:5327, Score:4522.541, sT:50033, sP:3.1902, sB:0.7484, nT:157699, nP:3.8953, nB:0.774
Cond:7341, Score:4521.192, sT:50290, sP:3.1969, sB:0.7478, nT:158800, nP:3.8965, nB:0.763
Cond:80, Score:4519.569, sT:52975, sP:3.2386, sB:0.722, nT:157580, nP:3.835, nB:0.7572
Cond:4895, Score:4514.985, sT:50601, sP:3.1946, sB:0.7396, nT:160199, nP:3.8896, nB:0.7654 , T3:7896,1961,4972,7464,5327,7341,80,4895, 
LowScoreRank2 , T0:66 , T1:1 , T2:
Cond:306, Score:4325.669, sT:51642, sP:3.2907, sB:0.7053, nT:161201, nP:3.9107, nB:0.7479
Cond:80, Score:4309.757, sT:53135, sP:3.2306, sB:0.6828, nT:160814, nP:3.8776, nB:0.7247
Cond:68, Score:4272.44, sT:55021, sP:3.3214, sB:0.6582, nT:172914, nP:3.9308, nB:0.7181
Cond:82, Score:4240.511, sT:64729, sP:3.5754, sB:0.5978, nT:191511, nP:3.9719, nB:0.6549
Cond:5196, Score:4156.205, sT:50129, sP:3.2471, sB:0.6847, nT:176429, nP:4.1155, nB:0.7018
Cond:488, Score:4142.846, sT:50166, sP:3.2026, sB:0.6729, nT:169068, nP:3.9567, nB:0.7171
Cond:6645, Score:4132.878, sT:51036, sP:3.2343, sB:0.667, nT:178156, nP:4.0463, nB:0.6904
Cond:1620, Score:4127.978, sT:51249, sP:3.2179, sB:0.656, nT:174450, nP:4.0154, nB:0.717 , T3:306,80,68,82,5196,488,6645,1620, 
LowScoreRank2 , T0:472 , T1:1 , T2:
Cond:2322, Score:4550.453, sT:50100, sP:3.194, sB:0.761, nT:157054, nP:3.883, nB:0.7515
Cond:696, Score:4535.501, sT:52200, sP:3.1827, sB:0.7207, nT:165269, nP:3.8673, nB:0.7498
Cond:1144, Score:4534.216, sT:50129, sP:3.1877, sB:0.7501, nT:157411, nP:3.8908, nB:0.7719
Cond:3668, Score:4498.971, sT:51438, sP:3.1556, sB:0.7196, nT:160702, nP:3.8327, nB:0.7582
Cond:24, Score:4497.764, sT:50539, sP:3.2062, sB:0.7415, nT:157842, nP:3.8902, nB:0.7646
Cond:1368, Score:4492.594, sT:51319, sP:3.1713, sB:0.7232, nT:161737, nP:3.8704, nB:0.7548
Cond:488, Score:4456.836, sT:54909, sP:3.2429, sB:0.6806, nT:176773, nP:3.934, nB:0.7241
Cond:686, Score:4443.449, sT:51087, sP:3.1915, sB:0.7194, nT:162306, nP:3.8854, nB:0.7517 , T3:2322,696,1144,3668,24,1368,488,686, 
LowScoreRank2 , T0:-1 , T1:1 , T2:
Cond:52, Score:4659.207, sT:51297, sP:3.2276, sB:0.764, nT:161182, nP:3.8881, nB:0.7701
Cond:2998, Score:4618.862, sT:50986, sP:3.196, sB:0.7555, nT:160312, nP:3.8793, nB:0.7691
Cond:1424, Score:4614.882, sT:50557, sP:3.1959, sB:0.7618, nT:159069, nP:3.8823, nB:0.7687
Cond:6717, Score:4614.266, sT:50720, sP:3.1949, sB:0.7588, nT:159578, nP:3.8832, nB:0.7689
Cond:6697, Score:4611.635, sT:50576, sP:3.197, sB:0.7608, nT:159144, nP:3.8847, nB:0.7695
Cond:6907, Score:4611.149, sT:51151, sP:3.2011, sB:0.7544, nT:160979, nP:3.8899, nB:0.7615
Cond:24, Score:4609.739, sT:51197, sP:3.1959, sB:0.7526, nT:160598, nP:3.8783, nB:0.762
Cond:7581, Score:4608.596, sT:50673, sP:3.1975, sB:0.759, nT:159280, nP:3.8854, nB:0.769 , T3:52,2998,1424,6717,6697,6907,24,7581, 
End , T0:06:57:19.1548498 



 */
